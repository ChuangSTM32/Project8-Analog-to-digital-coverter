
Analog-to-digital coverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd0  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800527c  0800527c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800527c  0800527c  0001527c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005284  08005284  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005284  08005284  00015284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005288  08005288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800528c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000610  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000674  20000674  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009a79  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e72  00000000  00000000  00029b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000958  00000000  00000000  0002b9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000070e  00000000  00000000  0002c320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003131  00000000  00000000  0002ca2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000de85  00000000  00000000  0002fb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000de7fe  00000000  00000000  0003d9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002aa4  00000000  00000000  0011c1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0011ec88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004494 	.word	0x08004494

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08004494 	.word	0x08004494

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b970 	b.w	8000bf4 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9e08      	ldr	r6, [sp, #32]
 8000932:	460d      	mov	r5, r1
 8000934:	4604      	mov	r4, r0
 8000936:	460f      	mov	r7, r1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d14a      	bne.n	80009d2 <__udivmoddi4+0xa6>
 800093c:	428a      	cmp	r2, r1
 800093e:	4694      	mov	ip, r2
 8000940:	d965      	bls.n	8000a0e <__udivmoddi4+0xe2>
 8000942:	fab2 f382 	clz	r3, r2
 8000946:	b143      	cbz	r3, 800095a <__udivmoddi4+0x2e>
 8000948:	fa02 fc03 	lsl.w	ip, r2, r3
 800094c:	f1c3 0220 	rsb	r2, r3, #32
 8000950:	409f      	lsls	r7, r3
 8000952:	fa20 f202 	lsr.w	r2, r0, r2
 8000956:	4317      	orrs	r7, r2
 8000958:	409c      	lsls	r4, r3
 800095a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800095e:	fa1f f58c 	uxth.w	r5, ip
 8000962:	fbb7 f1fe 	udiv	r1, r7, lr
 8000966:	0c22      	lsrs	r2, r4, #16
 8000968:	fb0e 7711 	mls	r7, lr, r1, r7
 800096c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000970:	fb01 f005 	mul.w	r0, r1, r5
 8000974:	4290      	cmp	r0, r2
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x62>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000980:	f080 811c 	bcs.w	8000bbc <__udivmoddi4+0x290>
 8000984:	4290      	cmp	r0, r2
 8000986:	f240 8119 	bls.w	8000bbc <__udivmoddi4+0x290>
 800098a:	3902      	subs	r1, #2
 800098c:	4462      	add	r2, ip
 800098e:	1a12      	subs	r2, r2, r0
 8000990:	b2a4      	uxth	r4, r4
 8000992:	fbb2 f0fe 	udiv	r0, r2, lr
 8000996:	fb0e 2210 	mls	r2, lr, r0, r2
 800099a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800099e:	fb00 f505 	mul.w	r5, r0, r5
 80009a2:	42a5      	cmp	r5, r4
 80009a4:	d90a      	bls.n	80009bc <__udivmoddi4+0x90>
 80009a6:	eb1c 0404 	adds.w	r4, ip, r4
 80009aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ae:	f080 8107 	bcs.w	8000bc0 <__udivmoddi4+0x294>
 80009b2:	42a5      	cmp	r5, r4
 80009b4:	f240 8104 	bls.w	8000bc0 <__udivmoddi4+0x294>
 80009b8:	4464      	add	r4, ip
 80009ba:	3802      	subs	r0, #2
 80009bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009c0:	1b64      	subs	r4, r4, r5
 80009c2:	2100      	movs	r1, #0
 80009c4:	b11e      	cbz	r6, 80009ce <__udivmoddi4+0xa2>
 80009c6:	40dc      	lsrs	r4, r3
 80009c8:	2300      	movs	r3, #0
 80009ca:	e9c6 4300 	strd	r4, r3, [r6]
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0xbc>
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	f000 80ed 	beq.w	8000bb6 <__udivmoddi4+0x28a>
 80009dc:	2100      	movs	r1, #0
 80009de:	e9c6 0500 	strd	r0, r5, [r6]
 80009e2:	4608      	mov	r0, r1
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	fab3 f183 	clz	r1, r3
 80009ec:	2900      	cmp	r1, #0
 80009ee:	d149      	bne.n	8000a84 <__udivmoddi4+0x158>
 80009f0:	42ab      	cmp	r3, r5
 80009f2:	d302      	bcc.n	80009fa <__udivmoddi4+0xce>
 80009f4:	4282      	cmp	r2, r0
 80009f6:	f200 80f8 	bhi.w	8000bea <__udivmoddi4+0x2be>
 80009fa:	1a84      	subs	r4, r0, r2
 80009fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000a00:	2001      	movs	r0, #1
 8000a02:	4617      	mov	r7, r2
 8000a04:	2e00      	cmp	r6, #0
 8000a06:	d0e2      	beq.n	80009ce <__udivmoddi4+0xa2>
 8000a08:	e9c6 4700 	strd	r4, r7, [r6]
 8000a0c:	e7df      	b.n	80009ce <__udivmoddi4+0xa2>
 8000a0e:	b902      	cbnz	r2, 8000a12 <__udivmoddi4+0xe6>
 8000a10:	deff      	udf	#255	; 0xff
 8000a12:	fab2 f382 	clz	r3, r2
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f040 8090 	bne.w	8000b3c <__udivmoddi4+0x210>
 8000a1c:	1a8a      	subs	r2, r1, r2
 8000a1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a22:	fa1f fe8c 	uxth.w	lr, ip
 8000a26:	2101      	movs	r1, #1
 8000a28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a30:	0c22      	lsrs	r2, r4, #16
 8000a32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a36:	fb0e f005 	mul.w	r0, lr, r5
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x124>
 8000a3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0x122>
 8000a48:	4290      	cmp	r0, r2
 8000a4a:	f200 80cb 	bhi.w	8000be4 <__udivmoddi4+0x2b8>
 8000a4e:	4645      	mov	r5, r8
 8000a50:	1a12      	subs	r2, r2, r0
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a58:	fb07 2210 	mls	r2, r7, r0, r2
 8000a5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a60:	fb0e fe00 	mul.w	lr, lr, r0
 8000a64:	45a6      	cmp	lr, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x14e>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a70:	d202      	bcs.n	8000a78 <__udivmoddi4+0x14c>
 8000a72:	45a6      	cmp	lr, r4
 8000a74:	f200 80bb 	bhi.w	8000bee <__udivmoddi4+0x2c2>
 8000a78:	4610      	mov	r0, r2
 8000a7a:	eba4 040e 	sub.w	r4, r4, lr
 8000a7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a82:	e79f      	b.n	80009c4 <__udivmoddi4+0x98>
 8000a84:	f1c1 0720 	rsb	r7, r1, #32
 8000a88:	408b      	lsls	r3, r1
 8000a8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a92:	fa05 f401 	lsl.w	r4, r5, r1
 8000a96:	fa20 f307 	lsr.w	r3, r0, r7
 8000a9a:	40fd      	lsrs	r5, r7
 8000a9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aa0:	4323      	orrs	r3, r4
 8000aa2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000aa6:	fa1f fe8c 	uxth.w	lr, ip
 8000aaa:	fb09 5518 	mls	r5, r9, r8, r5
 8000aae:	0c1c      	lsrs	r4, r3, #16
 8000ab0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ab4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ab8:	42a5      	cmp	r5, r4
 8000aba:	fa02 f201 	lsl.w	r2, r2, r1
 8000abe:	fa00 f001 	lsl.w	r0, r0, r1
 8000ac2:	d90b      	bls.n	8000adc <__udivmoddi4+0x1b0>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000acc:	f080 8088 	bcs.w	8000be0 <__udivmoddi4+0x2b4>
 8000ad0:	42a5      	cmp	r5, r4
 8000ad2:	f240 8085 	bls.w	8000be0 <__udivmoddi4+0x2b4>
 8000ad6:	f1a8 0802 	sub.w	r8, r8, #2
 8000ada:	4464      	add	r4, ip
 8000adc:	1b64      	subs	r4, r4, r5
 8000ade:	b29d      	uxth	r5, r3
 8000ae0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ae4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ae8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000aec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000af0:	45a6      	cmp	lr, r4
 8000af2:	d908      	bls.n	8000b06 <__udivmoddi4+0x1da>
 8000af4:	eb1c 0404 	adds.w	r4, ip, r4
 8000af8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000afc:	d26c      	bcs.n	8000bd8 <__udivmoddi4+0x2ac>
 8000afe:	45a6      	cmp	lr, r4
 8000b00:	d96a      	bls.n	8000bd8 <__udivmoddi4+0x2ac>
 8000b02:	3b02      	subs	r3, #2
 8000b04:	4464      	add	r4, ip
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b0e:	eba4 040e 	sub.w	r4, r4, lr
 8000b12:	42ac      	cmp	r4, r5
 8000b14:	46c8      	mov	r8, r9
 8000b16:	46ae      	mov	lr, r5
 8000b18:	d356      	bcc.n	8000bc8 <__udivmoddi4+0x29c>
 8000b1a:	d053      	beq.n	8000bc4 <__udivmoddi4+0x298>
 8000b1c:	b156      	cbz	r6, 8000b34 <__udivmoddi4+0x208>
 8000b1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b22:	eb64 040e 	sbc.w	r4, r4, lr
 8000b26:	fa04 f707 	lsl.w	r7, r4, r7
 8000b2a:	40ca      	lsrs	r2, r1
 8000b2c:	40cc      	lsrs	r4, r1
 8000b2e:	4317      	orrs	r7, r2
 8000b30:	e9c6 7400 	strd	r7, r4, [r6]
 8000b34:	4618      	mov	r0, r3
 8000b36:	2100      	movs	r1, #0
 8000b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3c:	f1c3 0120 	rsb	r1, r3, #32
 8000b40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b44:	fa20 f201 	lsr.w	r2, r0, r1
 8000b48:	fa25 f101 	lsr.w	r1, r5, r1
 8000b4c:	409d      	lsls	r5, r3
 8000b4e:	432a      	orrs	r2, r5
 8000b50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b54:	fa1f fe8c 	uxth.w	lr, ip
 8000b58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b60:	0c11      	lsrs	r1, r2, #16
 8000b62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b66:	fb00 f50e 	mul.w	r5, r0, lr
 8000b6a:	428d      	cmp	r5, r1
 8000b6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x258>
 8000b72:	eb1c 0101 	adds.w	r1, ip, r1
 8000b76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b7a:	d22f      	bcs.n	8000bdc <__udivmoddi4+0x2b0>
 8000b7c:	428d      	cmp	r5, r1
 8000b7e:	d92d      	bls.n	8000bdc <__udivmoddi4+0x2b0>
 8000b80:	3802      	subs	r0, #2
 8000b82:	4461      	add	r1, ip
 8000b84:	1b49      	subs	r1, r1, r5
 8000b86:	b292      	uxth	r2, r2
 8000b88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b94:	fb05 f10e 	mul.w	r1, r5, lr
 8000b98:	4291      	cmp	r1, r2
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x282>
 8000b9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba4:	d216      	bcs.n	8000bd4 <__udivmoddi4+0x2a8>
 8000ba6:	4291      	cmp	r1, r2
 8000ba8:	d914      	bls.n	8000bd4 <__udivmoddi4+0x2a8>
 8000baa:	3d02      	subs	r5, #2
 8000bac:	4462      	add	r2, ip
 8000bae:	1a52      	subs	r2, r2, r1
 8000bb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bb4:	e738      	b.n	8000a28 <__udivmoddi4+0xfc>
 8000bb6:	4631      	mov	r1, r6
 8000bb8:	4630      	mov	r0, r6
 8000bba:	e708      	b.n	80009ce <__udivmoddi4+0xa2>
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e6e6      	b.n	800098e <__udivmoddi4+0x62>
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	e6fb      	b.n	80009bc <__udivmoddi4+0x90>
 8000bc4:	4548      	cmp	r0, r9
 8000bc6:	d2a9      	bcs.n	8000b1c <__udivmoddi4+0x1f0>
 8000bc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	e7a3      	b.n	8000b1c <__udivmoddi4+0x1f0>
 8000bd4:	4645      	mov	r5, r8
 8000bd6:	e7ea      	b.n	8000bae <__udivmoddi4+0x282>
 8000bd8:	462b      	mov	r3, r5
 8000bda:	e794      	b.n	8000b06 <__udivmoddi4+0x1da>
 8000bdc:	4640      	mov	r0, r8
 8000bde:	e7d1      	b.n	8000b84 <__udivmoddi4+0x258>
 8000be0:	46d0      	mov	r8, sl
 8000be2:	e77b      	b.n	8000adc <__udivmoddi4+0x1b0>
 8000be4:	3d02      	subs	r5, #2
 8000be6:	4462      	add	r2, ip
 8000be8:	e732      	b.n	8000a50 <__udivmoddi4+0x124>
 8000bea:	4608      	mov	r0, r1
 8000bec:	e70a      	b.n	8000a04 <__udivmoddi4+0xd8>
 8000bee:	4464      	add	r4, ip
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	e742      	b.n	8000a7a <__udivmoddi4+0x14e>

08000bf4 <__aeabi_idiv0>:
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c0c:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <MX_ADC1_Init+0x9c>)
 8000c0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c38:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <MX_ADC1_Init+0xa0>)
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c58:	f000 fe6c 	bl	8001934 <HAL_ADC_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c62:	f000 f9fd 	bl	8001060 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c66:	2309      	movs	r3, #9
 8000c68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	4619      	mov	r1, r3
 8000c76:	4806      	ldr	r0, [pc, #24]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c78:	f001 f80a 	bl	8001c90 <HAL_ADC_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c82:	f000 f9ed 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000080 	.word	0x20000080
 8000c94:	40012000 	.word	0x40012000
 8000c98:	0f000001 	.word	0x0f000001

08000c9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <HAL_ADC_MspInit+0x7c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d127      	bne.n	8000d0e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	4a15      	ldr	r2, [pc, #84]	; (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_ADC_MspInit+0x80>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <HAL_ADC_MspInit+0x80>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <HAL_ADC_MspInit+0x84>)
 8000d0a:	f001 fad5 	bl	80022b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	; 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40012000 	.word	0x40012000
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020400 	.word	0x40020400

08000d24 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_GPIO_Init+0x30>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <MX_GPIO_Init+0x30>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_GPIO_Init+0x30>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <MX_I2C1_Init+0x78>)
 8000d60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <MX_I2C1_Init+0x7c>)
 8000d66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d96:	f001 fc3b 	bl	8002610 <HAL_I2C_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000da0:	f000 f95e 	bl	8001060 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000da4:	2100      	movs	r1, #0
 8000da6:	4809      	ldr	r0, [pc, #36]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000da8:	f002 f9fd 	bl	80031a6 <HAL_I2CEx_ConfigAnalogFilter>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000db2:	f000 f955 	bl	8001060 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000dba:	f002 fa30 	bl	800321e <HAL_I2CEx_ConfigDigitalFilter>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000dc4:	f000 f94c 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200000c8 	.word	0x200000c8
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	00061a80 	.word	0x00061a80

08000dd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <HAL_I2C_MspInit+0x84>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d12c      	bne.n	8000e54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1c:	2312      	movs	r3, #18
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	480c      	ldr	r0, [pc, #48]	; (8000e64 <HAL_I2C_MspInit+0x8c>)
 8000e34:	f001 fa40 	bl	80022b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	; 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020400 	.word	0x40020400

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6e:	f000 fccb 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e72:	f000 f895 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e76:	f7ff ff55 	bl	8000d24 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e7a:	f7ff febd 	bl	8000bf8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e7e:	f7ff ff6b 	bl	8000d58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(20);
 8000e82:	2014      	movs	r0, #20
 8000e84:	f000 fd32 	bl	80018ec <HAL_Delay>
  OLED_Init();
 8000e88:	f000 f8f0 	bl	800106c <OLED_Init>
  OLED_ShowString(0, 0, "AD: ", &Font_11x18);
 8000e8c:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <main+0x118>)
 8000e8e:	4a3d      	ldr	r2, [pc, #244]	; (8000f84 <main+0x11c>)
 8000e90:	2100      	movs	r1, #0
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 faea 	bl	800146c <OLED_ShowString>
  OLED_ShowString(0, 25, "Volt: ", &Font_11x18);
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <main+0x118>)
 8000e9a:	4a3b      	ldr	r2, [pc, #236]	; (8000f88 <main+0x120>)
 8000e9c:	2119      	movs	r1, #25
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 fae4 	bl	800146c <OLED_ShowString>
  OLED_ShowString(82, 25, ".", &Font_11x18);
 8000ea4:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <main+0x118>)
 8000ea6:	4a39      	ldr	r2, [pc, #228]	; (8000f8c <main+0x124>)
 8000ea8:	2119      	movs	r1, #25
 8000eaa:	2052      	movs	r0, #82	; 0x52
 8000eac:	f000 fade 	bl	800146c <OLED_ShowString>
  HAL_ADC_Start(&hadc1);
 8000eb0:	4837      	ldr	r0, [pc, #220]	; (8000f90 <main+0x128>)
 8000eb2:	f000 fd83 	bl	80019bc <HAL_ADC_Start>
  uint32_t ADValue = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
  float Voltage = 0;
 8000eba:	f04f 0300 	mov.w	r3, #0
 8000ebe:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000ec0:	4833      	ldr	r0, [pc, #204]	; (8000f90 <main+0x128>)
 8000ec2:	f000 fd7b 	bl	80019bc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8000eca:	4831      	ldr	r0, [pc, #196]	; (8000f90 <main+0x128>)
 8000ecc:	f000 fe48 	bl	8001b60 <HAL_ADC_PollForConversion>
	  ADValue =  HAL_ADC_GetValue(&hadc1);
 8000ed0:	482f      	ldr	r0, [pc, #188]	; (8000f90 <main+0x128>)
 8000ed2:	f000 fed0 	bl	8001c76 <HAL_ADC_GetValue>
 8000ed6:	6078      	str	r0, [r7, #4]
	  Voltage = (float) ADValue / 4095 * 3.3;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000f94 <main+0x12c>
 8000ee6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000eea:	ee16 0a90 	vmov	r0, s13
 8000eee:	f7ff fc5d 	bl	80007ac <__aeabi_f2d>
 8000ef2:	a321      	add	r3, pc, #132	; (adr r3, 8000f78 <main+0x110>)
 8000ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef8:	f7ff f9ca 	bl	8000290 <__aeabi_dmul>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f7ff fcaa 	bl	800085c <__aeabi_d2f>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	603b      	str	r3, [r7, #0]
	  OLED_ShowNum_Fill_Zero(70, 0, 4, ADValue, &Font_11x18);
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <main+0x118>)
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2204      	movs	r2, #4
 8000f14:	2100      	movs	r1, #0
 8000f16:	2046      	movs	r0, #70	; 0x46
 8000f18:	f000 faf6 	bl	8001508 <OLED_ShowNum_Fill_Zero>
	  OLED_ShowNum_Fill_Zero(70, 25, 1, Voltage, &Font_11x18);
 8000f1c:	edd7 7a00 	vldr	s15, [r7]
 8000f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <main+0x118>)
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	ee17 3a90 	vmov	r3, s15
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2119      	movs	r1, #25
 8000f30:	2046      	movs	r0, #70	; 0x46
 8000f32:	f000 fae9 	bl	8001508 <OLED_ShowNum_Fill_Zero>
	  OLED_ShowNum(93, 25, (int)(Voltage * 100) % 100, &Font_11x18);
 8000f36:	edd7 7a00 	vldr	s15, [r7]
 8000f3a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000f98 <main+0x130>
 8000f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f46:	ee17 2a90 	vmov	r2, s15
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <main+0x134>)
 8000f4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000f50:	1159      	asrs	r1, r3, #5
 8000f52:	17d3      	asrs	r3, r2, #31
 8000f54:	1acb      	subs	r3, r1, r3
 8000f56:	2164      	movs	r1, #100	; 0x64
 8000f58:	fb01 f303 	mul.w	r3, r1, r3
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <main+0x118>)
 8000f62:	2119      	movs	r1, #25
 8000f64:	205d      	movs	r0, #93	; 0x5d
 8000f66:	f000 fab1 	bl	80014cc <OLED_ShowNum>
	  HAL_Delay(100);
 8000f6a:	2064      	movs	r0, #100	; 0x64
 8000f6c:	f000 fcbe 	bl	80018ec <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000f70:	e7a6      	b.n	8000ec0 <main+0x58>
 8000f72:	bf00      	nop
 8000f74:	f3af 8000 	nop.w
 8000f78:	66666666 	.word	0x66666666
 8000f7c:	400a6666 	.word	0x400a6666
 8000f80:	20000000 	.word	0x20000000
 8000f84:	080044ac 	.word	0x080044ac
 8000f88:	080044b4 	.word	0x080044b4
 8000f8c:	080044bc 	.word	0x080044bc
 8000f90:	20000080 	.word	0x20000080
 8000f94:	457ff000 	.word	0x457ff000
 8000f98:	42c80000 	.word	0x42c80000
 8000f9c:	51eb851f 	.word	0x51eb851f

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2230      	movs	r2, #48	; 0x30
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 fdec 	bl	8003b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <SystemClock_Config+0xb8>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a22      	ldr	r2, [pc, #136]	; (8001058 <SystemClock_Config+0xb8>)
 8000fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b20      	ldr	r3, [pc, #128]	; (8001058 <SystemClock_Config+0xb8>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <SystemClock_Config+0xbc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <SystemClock_Config+0xbc>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <SystemClock_Config+0xbc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001008:	2310      	movs	r3, #16
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800100c:	2300      	movs	r3, #0
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001010:	f107 0320 	add.w	r3, r7, #32
 8001014:	4618      	mov	r0, r3
 8001016:	f002 f941 	bl	800329c <HAL_RCC_OscConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001020:	f000 f81e 	bl	8001060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001024:	230f      	movs	r3, #15
 8001026:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f002 fba4 	bl	800378c <HAL_RCC_ClockConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800104a:	f000 f809 	bl	8001060 <Error_Handler>
  }
}
 800104e:	bf00      	nop
 8001050:	3750      	adds	r7, #80	; 0x50
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40007000 	.word	0x40007000

08001060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001068:	e7fe      	b.n	8001068 <Error_Handler+0x8>
	...

0800106c <OLED_Init>:
        }
    }
}


uint8_t OLED_Init(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

	/* Init I2C */
	OLED_I2C_Init();
 8001072:	f000 fa6b 	bl	800154c <OLED_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, OLED_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001076:	f644 6320 	movw	r3, #20000	; 0x4e20
 800107a:	2201      	movs	r2, #1
 800107c:	2178      	movs	r1, #120	; 0x78
 800107e:	485b      	ldr	r0, [pc, #364]	; (80011ec <OLED_Init+0x180>)
 8001080:	f001 fd08 	bl	8002a94 <HAL_I2C_IsDeviceReady>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <OLED_Init+0x22>
		/* Return false */
		return 0;
 800108a:	2300      	movs	r3, #0
 800108c:	e0a9      	b.n	80011e2 <OLED_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800108e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001092:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001094:	e002      	b.n	800109c <OLED_Init+0x30>
		p--;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3b01      	subs	r3, #1
 800109a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f9      	bne.n	8001096 <OLED_Init+0x2a>

	/* Init LCD */
	OLED_WRITECOMMAND(0xAE); //display off
 80010a2:	22ae      	movs	r2, #174	; 0xae
 80010a4:	2100      	movs	r1, #0
 80010a6:	2078      	movs	r0, #120	; 0x78
 80010a8:	f000 facc 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80010ac:	2220      	movs	r2, #32
 80010ae:	2100      	movs	r1, #0
 80010b0:	2078      	movs	r0, #120	; 0x78
 80010b2:	f000 fac7 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010b6:	2210      	movs	r2, #16
 80010b8:	2100      	movs	r1, #0
 80010ba:	2078      	movs	r0, #120	; 0x78
 80010bc:	f000 fac2 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010c0:	22b0      	movs	r2, #176	; 0xb0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2078      	movs	r0, #120	; 0x78
 80010c6:	f000 fabd 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010ca:	22c8      	movs	r2, #200	; 0xc8
 80010cc:	2100      	movs	r1, #0
 80010ce:	2078      	movs	r0, #120	; 0x78
 80010d0:	f000 fab8 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x00); //---set low column address
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2078      	movs	r0, #120	; 0x78
 80010da:	f000 fab3 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x10); //---set high column address
 80010de:	2210      	movs	r2, #16
 80010e0:	2100      	movs	r1, #0
 80010e2:	2078      	movs	r0, #120	; 0x78
 80010e4:	f000 faae 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x40); //--set start line address
 80010e8:	2240      	movs	r2, #64	; 0x40
 80010ea:	2100      	movs	r1, #0
 80010ec:	2078      	movs	r0, #120	; 0x78
 80010ee:	f000 faa9 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x81); //--set contrast control register
 80010f2:	2281      	movs	r2, #129	; 0x81
 80010f4:	2100      	movs	r1, #0
 80010f6:	2078      	movs	r0, #120	; 0x78
 80010f8:	f000 faa4 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xFF);
 80010fc:	22ff      	movs	r2, #255	; 0xff
 80010fe:	2100      	movs	r1, #0
 8001100:	2078      	movs	r0, #120	; 0x78
 8001102:	f000 fa9f 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001106:	22a1      	movs	r2, #161	; 0xa1
 8001108:	2100      	movs	r1, #0
 800110a:	2078      	movs	r0, #120	; 0x78
 800110c:	f000 fa9a 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA6); //--set normal display
 8001110:	22a6      	movs	r2, #166	; 0xa6
 8001112:	2100      	movs	r1, #0
 8001114:	2078      	movs	r0, #120	; 0x78
 8001116:	f000 fa95 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800111a:	22a8      	movs	r2, #168	; 0xa8
 800111c:	2100      	movs	r1, #0
 800111e:	2078      	movs	r0, #120	; 0x78
 8001120:	f000 fa90 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x3F); //
 8001124:	223f      	movs	r2, #63	; 0x3f
 8001126:	2100      	movs	r1, #0
 8001128:	2078      	movs	r0, #120	; 0x78
 800112a:	f000 fa8b 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800112e:	22a4      	movs	r2, #164	; 0xa4
 8001130:	2100      	movs	r1, #0
 8001132:	2078      	movs	r0, #120	; 0x78
 8001134:	f000 fa86 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD3); //-set display offset
 8001138:	22d3      	movs	r2, #211	; 0xd3
 800113a:	2100      	movs	r1, #0
 800113c:	2078      	movs	r0, #120	; 0x78
 800113e:	f000 fa81 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x00); //-not offset
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2078      	movs	r0, #120	; 0x78
 8001148:	f000 fa7c 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800114c:	22d5      	movs	r2, #213	; 0xd5
 800114e:	2100      	movs	r1, #0
 8001150:	2078      	movs	r0, #120	; 0x78
 8001152:	f000 fa77 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xF0); //--set divide ratio
 8001156:	22f0      	movs	r2, #240	; 0xf0
 8001158:	2100      	movs	r1, #0
 800115a:	2078      	movs	r0, #120	; 0x78
 800115c:	f000 fa72 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD9); //--set pre-charge period
 8001160:	22d9      	movs	r2, #217	; 0xd9
 8001162:	2100      	movs	r1, #0
 8001164:	2078      	movs	r0, #120	; 0x78
 8001166:	f000 fa6d 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x22); //
 800116a:	2222      	movs	r2, #34	; 0x22
 800116c:	2100      	movs	r1, #0
 800116e:	2078      	movs	r0, #120	; 0x78
 8001170:	f000 fa68 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001174:	22da      	movs	r2, #218	; 0xda
 8001176:	2100      	movs	r1, #0
 8001178:	2078      	movs	r0, #120	; 0x78
 800117a:	f000 fa63 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x12);
 800117e:	2212      	movs	r2, #18
 8001180:	2100      	movs	r1, #0
 8001182:	2078      	movs	r0, #120	; 0x78
 8001184:	f000 fa5e 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xDB); //--set vcomh
 8001188:	22db      	movs	r2, #219	; 0xdb
 800118a:	2100      	movs	r1, #0
 800118c:	2078      	movs	r0, #120	; 0x78
 800118e:	f000 fa59 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001192:	2220      	movs	r2, #32
 8001194:	2100      	movs	r1, #0
 8001196:	2078      	movs	r0, #120	; 0x78
 8001198:	f000 fa54 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x8D); //--set DC-DC enable
 800119c:	228d      	movs	r2, #141	; 0x8d
 800119e:	2100      	movs	r1, #0
 80011a0:	2078      	movs	r0, #120	; 0x78
 80011a2:	f000 fa4f 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x14); //
 80011a6:	2214      	movs	r2, #20
 80011a8:	2100      	movs	r1, #0
 80011aa:	2078      	movs	r0, #120	; 0x78
 80011ac:	f000 fa4a 	bl	8001644 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xAF); //--turn on OLED panel
 80011b0:	22af      	movs	r2, #175	; 0xaf
 80011b2:	2100      	movs	r1, #0
 80011b4:	2078      	movs	r0, #120	; 0x78
 80011b6:	f000 fa45 	bl	8001644 <OLED_I2C_Write>


	OLED_WRITECOMMAND(OLED_DEACTIVATE_SCROLL);
 80011ba:	222e      	movs	r2, #46	; 0x2e
 80011bc:	2100      	movs	r1, #0
 80011be:	2078      	movs	r0, #120	; 0x78
 80011c0:	f000 fa40 	bl	8001644 <OLED_I2C_Write>

	/* Clear screen */
	OLED_Fill(OLED_COLOR_BLACK);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f000 f843 	bl	8001250 <OLED_Fill>

	/* Update screen */
	OLED_UpdateScreen();
 80011ca:	f000 f813 	bl	80011f4 <OLED_UpdateScreen>

	/* Set default values */
	OLED.CurrentX = 0;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <OLED_Init+0x184>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <OLED_Init+0x184>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	OLED.Initialized = 1;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <OLED_Init+0x184>)
 80011dc:	2201      	movs	r2, #1
 80011de:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80011e0:	2301      	movs	r3, #1
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000c8 	.word	0x200000c8
 80011f0:	2000051c 	.word	0x2000051c

080011f4 <OLED_UpdateScreen>:

void OLED_UpdateScreen(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	71fb      	strb	r3, [r7, #7]
 80011fe:	e01d      	b.n	800123c <OLED_UpdateScreen+0x48>
		OLED_WRITECOMMAND(0xB0 + m);
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	3b50      	subs	r3, #80	; 0x50
 8001204:	b2db      	uxtb	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	2100      	movs	r1, #0
 800120a:	2078      	movs	r0, #120	; 0x78
 800120c:	f000 fa1a 	bl	8001644 <OLED_I2C_Write>
		OLED_WRITECOMMAND(0x00);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	2078      	movs	r0, #120	; 0x78
 8001216:	f000 fa15 	bl	8001644 <OLED_I2C_Write>
		OLED_WRITECOMMAND(0x10);
 800121a:	2210      	movs	r2, #16
 800121c:	2100      	movs	r1, #0
 800121e:	2078      	movs	r0, #120	; 0x78
 8001220:	f000 fa10 	bl	8001644 <OLED_I2C_Write>

		/* Write multi data */
		OLED_I2C_WriteMulti(OLED_I2C_ADDR, 0x40, &OLED_Buffer[OLED_WIDTH * m], OLED_WIDTH);
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	01db      	lsls	r3, r3, #7
 8001228:	4a08      	ldr	r2, [pc, #32]	; (800124c <OLED_UpdateScreen+0x58>)
 800122a:	441a      	add	r2, r3
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	2140      	movs	r1, #64	; 0x40
 8001230:	2078      	movs	r0, #120	; 0x78
 8001232:	f000 f9a1 	bl	8001578 <OLED_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	3301      	adds	r3, #1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b07      	cmp	r3, #7
 8001240:	d9de      	bls.n	8001200 <OLED_UpdateScreen+0xc>
	}
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000011c 	.word	0x2000011c

08001250 <OLED_Fill>:
	for (i = 0; i < sizeof(OLED_Buffer); i++) {
		OLED_Buffer[i] = ~OLED_Buffer[i];
	}
}

void OLED_Fill(OLED_COLOR_t color) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(OLED_Buffer, (color == OLED_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(OLED_Buffer));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <OLED_Fill+0x14>
 8001260:	2300      	movs	r3, #0
 8001262:	e000      	b.n	8001266 <OLED_Fill+0x16>
 8001264:	23ff      	movs	r3, #255	; 0xff
 8001266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800126a:	4619      	mov	r1, r3
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <OLED_Fill+0x2c>)
 800126e:	f002 fc8d 	bl	8003b8c <memset>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000011c 	.word	0x2000011c

08001280 <OLED_DrawPixel>:

void OLED_DrawPixel(uint16_t x, uint16_t y, OLED_COLOR_t color) {
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
 800128a:	460b      	mov	r3, r1
 800128c:	80bb      	strh	r3, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	70fb      	strb	r3, [r7, #3]
	if (
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	2b7f      	cmp	r3, #127	; 0x7f
 8001296:	d848      	bhi.n	800132a <OLED_DrawPixel+0xaa>
		x >= OLED_WIDTH ||
 8001298:	88bb      	ldrh	r3, [r7, #4]
 800129a:	2b3f      	cmp	r3, #63	; 0x3f
 800129c:	d845      	bhi.n	800132a <OLED_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (OLED.Inverted) {
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <OLED_DrawPixel+0xb8>)
 80012a0:	791b      	ldrb	r3, [r3, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <OLED_DrawPixel+0x34>
		color = (OLED_COLOR_t)!color;
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == OLED_COLOR_WHITE) {
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d11a      	bne.n	80012f0 <OLED_DrawPixel+0x70>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	08db      	lsrs	r3, r3, #3
 80012c0:	b298      	uxth	r0, r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	01db      	lsls	r3, r3, #7
 80012c6:	4413      	add	r3, r2
 80012c8:	4a1c      	ldr	r2, [pc, #112]	; (800133c <OLED_DrawPixel+0xbc>)
 80012ca:	5cd3      	ldrb	r3, [r2, r3]
 80012cc:	b25a      	sxtb	r2, r3
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	2101      	movs	r1, #1
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b259      	sxtb	r1, r3
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	4603      	mov	r3, r0
 80012e4:	01db      	lsls	r3, r3, #7
 80012e6:	4413      	add	r3, r2
 80012e8:	b2c9      	uxtb	r1, r1
 80012ea:	4a14      	ldr	r2, [pc, #80]	; (800133c <OLED_DrawPixel+0xbc>)
 80012ec:	54d1      	strb	r1, [r2, r3]
 80012ee:	e01d      	b.n	800132c <OLED_DrawPixel+0xac>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 80012f0:	88fa      	ldrh	r2, [r7, #6]
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	b298      	uxth	r0, r3
 80012f8:	4603      	mov	r3, r0
 80012fa:	01db      	lsls	r3, r3, #7
 80012fc:	4413      	add	r3, r2
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <OLED_DrawPixel+0xbc>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	b25a      	sxtb	r2, r3
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	2101      	movs	r1, #1
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	b25b      	sxtb	r3, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	b25b      	sxtb	r3, r3
 8001316:	4013      	ands	r3, r2
 8001318:	b259      	sxtb	r1, r3
 800131a:	88fa      	ldrh	r2, [r7, #6]
 800131c:	4603      	mov	r3, r0
 800131e:	01db      	lsls	r3, r3, #7
 8001320:	4413      	add	r3, r2
 8001322:	b2c9      	uxtb	r1, r1
 8001324:	4a05      	ldr	r2, [pc, #20]	; (800133c <OLED_DrawPixel+0xbc>)
 8001326:	54d1      	strb	r1, [r2, r3]
 8001328:	e000      	b.n	800132c <OLED_DrawPixel+0xac>
		return;
 800132a:	bf00      	nop
	}
}
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	2000051c 	.word	0x2000051c
 800133c:	2000011c 	.word	0x2000011c

08001340 <OLED_SetCursor>:

void OLED_SetCursor(uint16_t x, uint16_t y) {
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	460a      	mov	r2, r1
 800134a:	80fb      	strh	r3, [r7, #6]
 800134c:	4613      	mov	r3, r2
 800134e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	OLED.CurrentX = x;
 8001350:	4a05      	ldr	r2, [pc, #20]	; (8001368 <OLED_SetCursor+0x28>)
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	8013      	strh	r3, [r2, #0]
	OLED.CurrentY = y;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <OLED_SetCursor+0x28>)
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	8053      	strh	r3, [r2, #2]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	2000051c 	.word	0x2000051c

0800136c <OLED_ShowChar>:

char OLED_ShowChar(char ch, FontDef_t* Font, OLED_COLOR_t color) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	4613      	mov	r3, r2
 800137a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
			OLED_WIDTH <= (OLED.CurrentX + Font->FontWidth) ||
 800137c:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <OLED_ShowChar+0xfc>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
	if (
 8001388:	2b7f      	cmp	r3, #127	; 0x7f
 800138a:	dc07      	bgt.n	800139c <OLED_ShowChar+0x30>
			OLED_HEIGHT <= (OLED.CurrentY + Font->FontHeight)
 800138c:	4b36      	ldr	r3, [pc, #216]	; (8001468 <OLED_ShowChar+0xfc>)
 800138e:	885b      	ldrh	r3, [r3, #2]
 8001390:	461a      	mov	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	785b      	ldrb	r3, [r3, #1]
 8001396:	4413      	add	r3, r2
			OLED_WIDTH <= (OLED.CurrentX + Font->FontWidth) ||
 8001398:	2b3f      	cmp	r3, #63	; 0x3f
 800139a:	dd01      	ble.n	80013a0 <OLED_ShowChar+0x34>
	) {
		/* Error */
		return 0;
 800139c:	2300      	movs	r3, #0
 800139e:	e05e      	b.n	800145e <OLED_ShowChar+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e04b      	b.n	800143e <OLED_ShowChar+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	3b20      	subs	r3, #32
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	7849      	ldrb	r1, [r1, #1]
 80013b2:	fb01 f303 	mul.w	r3, r1, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	440b      	add	r3, r1
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	e030      	b.n	800142c <OLED_ShowChar+0xc0>
			if ((b << j) & 0x8000) {
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d010      	beq.n	80013fc <OLED_ShowChar+0x90>
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR_t) color);
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <OLED_ShowChar+0xfc>)
 80013dc:	881a      	ldrh	r2, [r3, #0]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	b298      	uxth	r0, r3
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <OLED_ShowChar+0xfc>)
 80013e8:	885a      	ldrh	r2, [r3, #2]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	79ba      	ldrb	r2, [r7, #6]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff ff43 	bl	8001280 <OLED_DrawPixel>
 80013fa:	e014      	b.n	8001426 <OLED_ShowChar+0xba>
			} else {
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR_t)!color);
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <OLED_ShowChar+0xfc>)
 80013fe:	881a      	ldrh	r2, [r3, #0]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4413      	add	r3, r2
 8001406:	b298      	uxth	r0, r3
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <OLED_ShowChar+0xfc>)
 800140a:	885a      	ldrh	r2, [r3, #2]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4413      	add	r3, r2
 8001412:	b299      	uxth	r1, r3
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	2b00      	cmp	r3, #0
 8001418:	bf0c      	ite	eq
 800141a:	2301      	moveq	r3, #1
 800141c:	2300      	movne	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	f7ff ff2d 	bl	8001280 <OLED_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	3301      	adds	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4293      	cmp	r3, r2
 8001436:	d3c8      	bcc.n	80013ca <OLED_ShowChar+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	461a      	mov	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	4293      	cmp	r3, r2
 8001448:	d3ad      	bcc.n	80013a6 <OLED_ShowChar+0x3a>
			}
		}
	}

	/* Increase pointer */
	OLED.CurrentX += Font->FontWidth;
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <OLED_ShowChar+0xfc>)
 800144c:	881a      	ldrh	r2, [r3, #0]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	4413      	add	r3, r2
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <OLED_ShowChar+0xfc>)
 800145a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800145c:	79fb      	ldrb	r3, [r7, #7]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000051c 	.word	0x2000051c

0800146c <OLED_ShowString>:

char OLED_ShowString(uint16_t x, uint16_t y, char* str, FontDef_t* Font) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60ba      	str	r2, [r7, #8]
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4603      	mov	r3, r0
 8001478:	81fb      	strh	r3, [r7, #14]
 800147a:	460b      	mov	r3, r1
 800147c:	81bb      	strh	r3, [r7, #12]
	OLED_SetCursor(x, y);
 800147e:	89ba      	ldrh	r2, [r7, #12]
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5b 	bl	8001340 <OLED_SetCursor>

	/* Write characters */
	while (*str) {
 800148a:	e012      	b.n	80014b2 <OLED_ShowString+0x46>
		/* Write character by character */
		if (OLED_ShowChar(*str, Font, OLED_COLOR_WHITE) != *str) {
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2201      	movs	r2, #1
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff69 	bl	800136c <OLED_ShowChar>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d002      	beq.n	80014ac <OLED_ShowString+0x40>
			/* Return error */
			return *str;
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	e00a      	b.n	80014c2 <OLED_ShowString+0x56>
		}

		/* Increase string pointer */
		str++;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	3301      	adds	r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
	while (*str) {
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1e8      	bne.n	800148c <OLED_ShowString+0x20>
	}

	OLED_UpdateScreen();
 80014ba:	f7ff fe9b 	bl	80011f4 <OLED_UpdateScreen>

	/* Everything OK, zero should be returned */
	return *str;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	781b      	ldrb	r3, [r3, #0]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <OLED_ShowNum>:

void OLED_ShowNum(uint16_t x, uint16_t y, uint32_t Number, FontDef_t* Font)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60ba      	str	r2, [r7, #8]
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4603      	mov	r3, r0
 80014d8:	81fb      	strh	r3, [r7, #14]
 80014da:	460b      	mov	r3, r1
 80014dc:	81bb      	strh	r3, [r7, #12]
	char str[12];
	snprintf(str, sizeof(str), "%lu", Number);
 80014de:	f107 0014 	add.w	r0, r7, #20
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <OLED_ShowNum+0x38>)
 80014e6:	210c      	movs	r1, #12
 80014e8:	f002 fb1c 	bl	8003b24 <sniprintf>
	OLED_ShowString(x, y, str, Font);
 80014ec:	f107 0214 	add.w	r2, r7, #20
 80014f0:	89b9      	ldrh	r1, [r7, #12]
 80014f2:	89f8      	ldrh	r0, [r7, #14]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f7ff ffb9 	bl	800146c <OLED_ShowString>
}
 80014fa:	bf00      	nop
 80014fc:	3720      	adds	r7, #32
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	080044c0 	.word	0x080044c0

08001508 <OLED_ShowNum_Fill_Zero>:

void OLED_ShowNum_Fill_Zero(uint16_t x, uint16_t y, uint16_t len, uint32_t Number, FontDef_t* Font)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	; 0x30
 800150c:	af02      	add	r7, sp, #8
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	4603      	mov	r3, r0
 8001512:	81fb      	strh	r3, [r7, #14]
 8001514:	460b      	mov	r3, r1
 8001516:	81bb      	strh	r3, [r7, #12]
 8001518:	4613      	mov	r3, r2
 800151a:	817b      	strh	r3, [r7, #10]
	char str[20];
	snprintf(str, sizeof(str), "%0*lu", len, Number);
 800151c:	897a      	ldrh	r2, [r7, #10]
 800151e:	f107 0014 	add.w	r0, r7, #20
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	4613      	mov	r3, r2
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <OLED_ShowNum_Fill_Zero+0x40>)
 800152a:	2114      	movs	r1, #20
 800152c:	f002 fafa 	bl	8003b24 <sniprintf>
	OLED_ShowString(x, y, str, Font);
 8001530:	f107 0214 	add.w	r2, r7, #20
 8001534:	89b9      	ldrh	r1, [r7, #12]
 8001536:	89f8      	ldrh	r0, [r7, #14]
 8001538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153a:	f7ff ff97 	bl	800146c <OLED_ShowString>
}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	080044c4 	.word	0x080044c4

0800154c <OLED_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void OLED_I2C_Init() {
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <OLED_I2C_Init+0x28>)
 8001554:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001556:	e002      	b.n	800155e <OLED_I2C_Init+0x12>
		p--;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f9      	bne.n	8001558 <OLED_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	0003d090 	.word	0x0003d090

08001578 <OLED_I2C_WriteMulti>:

void OLED_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b0c7      	sub	sp, #284	; 0x11c
 800157c:	af02      	add	r7, sp, #8
 800157e:	4604      	mov	r4, r0
 8001580:	4608      	mov	r0, r1
 8001582:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001586:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800158a:	600a      	str	r2, [r1, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001592:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001596:	4622      	mov	r2, r4
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800159e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80015a2:	4602      	mov	r2, r0
 80015a4:	701a      	strb	r2, [r3, #0]
 80015a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015ae:	460a      	mov	r2, r1
 80015b0:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80015b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015be:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80015cc:	e015      	b.n	80015fa <OLED_I2C_WriteMulti+0x82>
		dt[i+1] = data[i];
 80015ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015d2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015d6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	441a      	add	r2, r3
 80015de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015e2:	3301      	adds	r3, #1
 80015e4:	7811      	ldrb	r1, [r2, #0]
 80015e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015ea:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80015ee:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 80015f0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015f4:	3301      	adds	r3, #1
 80015f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80015fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015fe:	b29b      	uxth	r3, r3
 8001600:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001604:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001608:	8812      	ldrh	r2, [r2, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d8df      	bhi.n	80015ce <OLED_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800160e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001612:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b299      	uxth	r1, r3
 800161a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800161e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	b29b      	uxth	r3, r3
 8001628:	f107 020c 	add.w	r2, r7, #12
 800162c:	200a      	movs	r0, #10
 800162e:	9000      	str	r0, [sp, #0]
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <OLED_I2C_WriteMulti+0xc8>)
 8001632:	f001 f931 	bl	8002898 <HAL_I2C_Master_Transmit>
}
 8001636:	bf00      	nop
 8001638:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}
 8001640:	200000c8 	.word	0x200000c8

08001644 <OLED_I2C_Write>:


void OLED_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af02      	add	r7, sp, #8
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	460b      	mov	r3, r1
 8001650:	71bb      	strb	r3, [r7, #6]
 8001652:	4613      	mov	r3, r2
 8001654:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800165a:	797b      	ldrb	r3, [r7, #5]
 800165c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	b299      	uxth	r1, r3
 8001662:	f107 020c 	add.w	r2, r7, #12
 8001666:	230a      	movs	r3, #10
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2302      	movs	r3, #2
 800166c:	4803      	ldr	r0, [pc, #12]	; (800167c <OLED_I2C_Write+0x38>)
 800166e:	f001 f913 	bl	8002898 <HAL_I2C_Master_Transmit>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200000c8 	.word	0x200000c8

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_MspInit+0x4c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <HAL_MspInit+0x4c>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_MspInit+0x4c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_MspInit+0x4c>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_MspInit+0x4c>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_MspInit+0x4c>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d4:	e7fe      	b.n	80016d4 <NMI_Handler+0x4>

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171c:	f000 f8c6 	bl	80018ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	; (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f002 fa22 	bl	8003b9c <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20030000 	.word	0x20030000
 8001784:	00000400 	.word	0x00000400
 8001788:	20000524 	.word	0x20000524
 800178c:	20000678 	.word	0x20000678

08001790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017b8:	f7ff ffea 	bl	8001790 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017be:	490d      	ldr	r1, [pc, #52]	; (80017f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d4:	4c0a      	ldr	r4, [pc, #40]	; (8001800 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017e2:	f002 f9e1 	bl	8003ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017e6:	f7ff fb3f 	bl	8000e68 <main>
  bx  lr    
 80017ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80017f8:	0800528c 	.word	0x0800528c
  ldr r2, =_sbss
 80017fc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001800:	20000674 	.word	0x20000674

08001804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC_IRQHandler>
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <HAL_Init+0x40>)
 8001812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001816:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_Init+0x40>)
 800181e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001822:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_Init+0x40>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 fd0d 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001836:	200f      	movs	r0, #15
 8001838:	f000 f808 	bl	800184c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800183c:	f7ff ff20 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023c00 	.word	0x40023c00

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x54>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x58>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	fbb3 f3f1 	udiv	r3, r3, r1
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fd17 	bl	800229e <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e00e      	b.n	8001898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d80a      	bhi.n	8001896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	2200      	movs	r2, #0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 fced 	bl	8002266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188c:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <HAL_InitTick+0x5c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000010 	.word	0x20000010
 80018a8:	2000000c 	.word	0x2000000c

080018ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x20>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_IncTick+0x24>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_IncTick+0x24>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000010 	.word	0x20000010
 80018d0:	20000528 	.word	0x20000528

080018d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_GetTick+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000528 	.word	0x20000528

080018ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff ffee 	bl	80018d4 <HAL_GetTick>
 80018f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001904:	d005      	beq.n	8001912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_Delay+0x44>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001912:	bf00      	nop
 8001914:	f7ff ffde 	bl	80018d4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	429a      	cmp	r2, r3
 8001922:	d8f7      	bhi.n	8001914 <HAL_Delay+0x28>
  {
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000010 	.word	0x20000010

08001934 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e033      	b.n	80019b2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff f9a2 	bl	8000c9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	2b00      	cmp	r3, #0
 8001970:	d118      	bne.n	80019a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800197a:	f023 0302 	bic.w	r3, r3, #2
 800197e:	f043 0202 	orr.w	r2, r3, #2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fab4 	bl	8001ef4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f023 0303 	bic.w	r3, r3, #3
 800199a:	f043 0201 	orr.w	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	641a      	str	r2, [r3, #64]	; 0x40
 80019a2:	e001      	b.n	80019a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_Start+0x1a>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e0b2      	b.n	8001b3c <HAL_ADC_Start+0x180>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d018      	beq.n	8001a1e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019fc:	4b52      	ldr	r3, [pc, #328]	; (8001b48 <HAL_ADC_Start+0x18c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a52      	ldr	r2, [pc, #328]	; (8001b4c <HAL_ADC_Start+0x190>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	0c9a      	lsrs	r2, r3, #18
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a10:	e002      	b.n	8001a18 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f9      	bne.n	8001a12 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d17a      	bne.n	8001b22 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a6a:	d106      	bne.n	8001a7a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	f023 0206 	bic.w	r2, r3, #6
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	645a      	str	r2, [r3, #68]	; 0x44
 8001a78:	e002      	b.n	8001a80 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a88:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <HAL_ADC_Start+0x194>)
 8001a8a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a94:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d12a      	bne.n	8001af8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2b      	ldr	r2, [pc, #172]	; (8001b54 <HAL_ADC_Start+0x198>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d015      	beq.n	8001ad8 <HAL_ADC_Start+0x11c>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <HAL_ADC_Start+0x19c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d105      	bne.n	8001ac2 <HAL_ADC_Start+0x106>
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_ADC_Start+0x194>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00a      	beq.n	8001ad8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a25      	ldr	r2, [pc, #148]	; (8001b5c <HAL_ADC_Start+0x1a0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d136      	bne.n	8001b3a <HAL_ADC_Start+0x17e>
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_ADC_Start+0x194>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d130      	bne.n	8001b3a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d129      	bne.n	8001b3a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	e020      	b.n	8001b3a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a15      	ldr	r2, [pc, #84]	; (8001b54 <HAL_ADC_Start+0x198>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d11b      	bne.n	8001b3a <HAL_ADC_Start+0x17e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d114      	bne.n	8001b3a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	e00b      	b.n	8001b3a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f043 0210 	orr.w	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f043 0201 	orr.w	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	431bde83 	.word	0x431bde83
 8001b50:	40012300 	.word	0x40012300
 8001b54:	40012000 	.word	0x40012000
 8001b58:	40012100 	.word	0x40012100
 8001b5c:	40012200 	.word	0x40012200

08001b60 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7c:	d113      	bne.n	8001ba6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f043 0220 	orr.w	r2, r3, #32
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e063      	b.n	8001c6e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba6:	f7ff fe95 	bl	80018d4 <HAL_GetTick>
 8001baa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bac:	e021      	b.n	8001bf2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d01d      	beq.n	8001bf2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_ADC_PollForConversion+0x6c>
 8001bbc:	f7ff fe8a 	bl	80018d4 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d212      	bcs.n	8001bf2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f043 0204 	orr.w	r2, r3, #4
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e03d      	b.n	8001c6e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d1d6      	bne.n	8001bae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0212 	mvn.w	r2, #18
 8001c08:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d123      	bne.n	8001c6c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d11f      	bne.n	8001c6c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d111      	bne.n	8001c6c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x1c>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e113      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x244>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b09      	cmp	r3, #9
 8001cba:	d925      	bls.n	8001d08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68d9      	ldr	r1, [r3, #12]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b1e      	subs	r3, #30
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43da      	mvns	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	400a      	ands	r2, r1
 8001ce0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68d9      	ldr	r1, [r3, #12]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4403      	add	r3, r0
 8001cfa:	3b1e      	subs	r3, #30
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	e022      	b.n	8001d4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6919      	ldr	r1, [r3, #16]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	400a      	ands	r2, r1
 8001d2a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6919      	ldr	r1, [r3, #16]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	4603      	mov	r3, r0
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4403      	add	r3, r0
 8001d44:	409a      	lsls	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d824      	bhi.n	8001da0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	3b05      	subs	r3, #5
 8001d68:	221f      	movs	r2, #31
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	400a      	ands	r2, r1
 8001d76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	4618      	mov	r0, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	3b05      	subs	r3, #5
 8001d92:	fa00 f203 	lsl.w	r2, r0, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d9e:	e04c      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b0c      	cmp	r3, #12
 8001da6:	d824      	bhi.n	8001df2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	3b23      	subs	r3, #35	; 0x23
 8001dba:	221f      	movs	r2, #31
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43da      	mvns	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	3b23      	subs	r3, #35	; 0x23
 8001de4:	fa00 f203 	lsl.w	r2, r0, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
 8001df0:	e023      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	3b41      	subs	r3, #65	; 0x41
 8001e04:	221f      	movs	r2, #31
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	400a      	ands	r2, r1
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b41      	subs	r3, #65	; 0x41
 8001e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <HAL_ADC_ConfigChannel+0x250>)
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a28      	ldr	r2, [pc, #160]	; (8001ee4 <HAL_ADC_ConfigChannel+0x254>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d10f      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x1d8>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b12      	cmp	r3, #18
 8001e4e:	d10b      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <HAL_ADC_ConfigChannel+0x254>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d12b      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x23a>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <HAL_ADC_ConfigChannel+0x258>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d003      	beq.n	8001e84 <HAL_ADC_ConfigChannel+0x1f4>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b11      	cmp	r3, #17
 8001e82:	d122      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <HAL_ADC_ConfigChannel+0x258>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d111      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_ADC_ConfigChannel+0x25c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a11      	ldr	r2, [pc, #68]	; (8001ef0 <HAL_ADC_ConfigChannel+0x260>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	0c9a      	lsrs	r2, r3, #18
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ebc:	e002      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f9      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	40012300 	.word	0x40012300
 8001ee4:	40012000 	.word	0x40012000
 8001ee8:	10000012 	.word	0x10000012
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	431bde83 	.word	0x431bde83

08001ef4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001efc:	4b79      	ldr	r3, [pc, #484]	; (80020e4 <ADC_Init+0x1f0>)
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	431a      	orrs	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	021a      	lsls	r2, r3, #8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6899      	ldr	r1, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	4a58      	ldr	r2, [pc, #352]	; (80020e8 <ADC_Init+0x1f4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d022      	beq.n	8001fd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6899      	ldr	r1, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6899      	ldr	r1, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	e00f      	b.n	8001ff2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fe0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ff0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0202 	bic.w	r2, r2, #2
 8002000:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6899      	ldr	r1, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7e1b      	ldrb	r3, [r3, #24]
 800200c:	005a      	lsls	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3020 	ldrb.w	r3, [r3, #32]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01b      	beq.n	8002058 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800202e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800203e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6859      	ldr	r1, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	3b01      	subs	r3, #1
 800204c:	035a      	lsls	r2, r3, #13
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	e007      	b.n	8002068 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002066:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	3b01      	subs	r3, #1
 8002084:	051a      	lsls	r2, r3, #20
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800209c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6899      	ldr	r1, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020aa:	025a      	lsls	r2, r3, #9
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6899      	ldr	r1, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	029a      	lsls	r2, r3, #10
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40012300 	.word	0x40012300
 80020e8:	0f000001 	.word	0x0f000001

080020ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <__NVIC_GetPriorityGrouping+0x18>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 0307 	and.w	r3, r3, #7
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800221c:	d301      	bcc.n	8002222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221e:	2301      	movs	r3, #1
 8002220:	e00f      	b.n	8002242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <SysTick_Config+0x40>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222a:	210f      	movs	r1, #15
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f7ff ff8e 	bl	8002150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <SysTick_Config+0x40>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <SysTick_Config+0x40>)
 800223c:	2207      	movs	r2, #7
 800223e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000e010 	.word	0xe000e010

08002250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff47 	bl	80020ec <__NVIC_SetPriorityGrouping>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002278:	f7ff ff5c 	bl	8002134 <__NVIC_GetPriorityGrouping>
 800227c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7ff ff8e 	bl	80021a4 <NVIC_EncodePriority>
 8002288:	4602      	mov	r2, r0
 800228a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff5d 	bl	8002150 <__NVIC_SetPriority>
}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffb0 	bl	800220c <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e177      	b.n	80025c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 8166 	bne.w	80025be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d005      	beq.n	800230a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002306:	2b02      	cmp	r3, #2
 8002308:	d130      	bne.n	800236c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	2203      	movs	r2, #3
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002340:	2201      	movs	r2, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 0201 	and.w	r2, r3, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b03      	cmp	r3, #3
 8002376:	d017      	beq.n	80023a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d123      	bne.n	80023fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	08da      	lsrs	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3208      	adds	r2, #8
 80023f6:	69b9      	ldr	r1, [r7, #24]
 80023f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0203 	and.w	r2, r3, #3
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80c0 	beq.w	80025be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b66      	ldr	r3, [pc, #408]	; (80025dc <HAL_GPIO_Init+0x324>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a65      	ldr	r2, [pc, #404]	; (80025dc <HAL_GPIO_Init+0x324>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b63      	ldr	r3, [pc, #396]	; (80025dc <HAL_GPIO_Init+0x324>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245a:	4a61      	ldr	r2, [pc, #388]	; (80025e0 <HAL_GPIO_Init+0x328>)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a58      	ldr	r2, [pc, #352]	; (80025e4 <HAL_GPIO_Init+0x32c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d037      	beq.n	80024f6 <HAL_GPIO_Init+0x23e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a57      	ldr	r2, [pc, #348]	; (80025e8 <HAL_GPIO_Init+0x330>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d031      	beq.n	80024f2 <HAL_GPIO_Init+0x23a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a56      	ldr	r2, [pc, #344]	; (80025ec <HAL_GPIO_Init+0x334>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d02b      	beq.n	80024ee <HAL_GPIO_Init+0x236>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a55      	ldr	r2, [pc, #340]	; (80025f0 <HAL_GPIO_Init+0x338>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d025      	beq.n	80024ea <HAL_GPIO_Init+0x232>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a54      	ldr	r2, [pc, #336]	; (80025f4 <HAL_GPIO_Init+0x33c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01f      	beq.n	80024e6 <HAL_GPIO_Init+0x22e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a53      	ldr	r2, [pc, #332]	; (80025f8 <HAL_GPIO_Init+0x340>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d019      	beq.n	80024e2 <HAL_GPIO_Init+0x22a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_GPIO_Init+0x344>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_GPIO_Init+0x226>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a51      	ldr	r2, [pc, #324]	; (8002600 <HAL_GPIO_Init+0x348>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00d      	beq.n	80024da <HAL_GPIO_Init+0x222>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a50      	ldr	r2, [pc, #320]	; (8002604 <HAL_GPIO_Init+0x34c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <HAL_GPIO_Init+0x21e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4f      	ldr	r2, [pc, #316]	; (8002608 <HAL_GPIO_Init+0x350>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_GPIO_Init+0x21a>
 80024ce:	2309      	movs	r3, #9
 80024d0:	e012      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024d2:	230a      	movs	r3, #10
 80024d4:	e010      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024d6:	2308      	movs	r3, #8
 80024d8:	e00e      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024da:	2307      	movs	r3, #7
 80024dc:	e00c      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024de:	2306      	movs	r3, #6
 80024e0:	e00a      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024e2:	2305      	movs	r3, #5
 80024e4:	e008      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024e6:	2304      	movs	r3, #4
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024ea:	2303      	movs	r3, #3
 80024ec:	e004      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024f6:	2300      	movs	r3, #0
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	f002 0203 	and.w	r2, r2, #3
 80024fe:	0092      	lsls	r2, r2, #2
 8002500:	4093      	lsls	r3, r2
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002508:	4935      	ldr	r1, [pc, #212]	; (80025e0 <HAL_GPIO_Init+0x328>)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	3302      	adds	r3, #2
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002516:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_GPIO_Init+0x354>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253a:	4a34      	ldr	r2, [pc, #208]	; (800260c <HAL_GPIO_Init+0x354>)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002540:	4b32      	ldr	r3, [pc, #200]	; (800260c <HAL_GPIO_Init+0x354>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002564:	4a29      	ldr	r2, [pc, #164]	; (800260c <HAL_GPIO_Init+0x354>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800256a:	4b28      	ldr	r3, [pc, #160]	; (800260c <HAL_GPIO_Init+0x354>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800258e:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_GPIO_Init+0x354>)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002594:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_GPIO_Init+0x354>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b8:	4a14      	ldr	r2, [pc, #80]	; (800260c <HAL_GPIO_Init+0x354>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3301      	adds	r3, #1
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2b0f      	cmp	r3, #15
 80025c8:	f67f ae84 	bls.w	80022d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40013800 	.word	0x40013800
 80025e4:	40020000 	.word	0x40020000
 80025e8:	40020400 	.word	0x40020400
 80025ec:	40020800 	.word	0x40020800
 80025f0:	40020c00 	.word	0x40020c00
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40021400 	.word	0x40021400
 80025fc:	40021800 	.word	0x40021800
 8002600:	40021c00 	.word	0x40021c00
 8002604:	40022000 	.word	0x40022000
 8002608:	40022400 	.word	0x40022400
 800260c:	40013c00 	.word	0x40013c00

08002610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e12b      	b.n	800287a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe fbce 	bl	8000dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2224      	movs	r2, #36	; 0x24
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002662:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002672:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002674:	f001 fa42 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8002678:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4a81      	ldr	r2, [pc, #516]	; (8002884 <HAL_I2C_Init+0x274>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d807      	bhi.n	8002694 <HAL_I2C_Init+0x84>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4a80      	ldr	r2, [pc, #512]	; (8002888 <HAL_I2C_Init+0x278>)
 8002688:	4293      	cmp	r3, r2
 800268a:	bf94      	ite	ls
 800268c:	2301      	movls	r3, #1
 800268e:	2300      	movhi	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	e006      	b.n	80026a2 <HAL_I2C_Init+0x92>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4a7d      	ldr	r2, [pc, #500]	; (800288c <HAL_I2C_Init+0x27c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	bf94      	ite	ls
 800269c:	2301      	movls	r3, #1
 800269e:	2300      	movhi	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e0e7      	b.n	800287a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4a78      	ldr	r2, [pc, #480]	; (8002890 <HAL_I2C_Init+0x280>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0c9b      	lsrs	r3, r3, #18
 80026b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4a6a      	ldr	r2, [pc, #424]	; (8002884 <HAL_I2C_Init+0x274>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d802      	bhi.n	80026e4 <HAL_I2C_Init+0xd4>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3301      	adds	r3, #1
 80026e2:	e009      	b.n	80026f8 <HAL_I2C_Init+0xe8>
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	4a69      	ldr	r2, [pc, #420]	; (8002894 <HAL_I2C_Init+0x284>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	099b      	lsrs	r3, r3, #6
 80026f6:	3301      	adds	r3, #1
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800270a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	495c      	ldr	r1, [pc, #368]	; (8002884 <HAL_I2C_Init+0x274>)
 8002714:	428b      	cmp	r3, r1
 8002716:	d819      	bhi.n	800274c <HAL_I2C_Init+0x13c>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1e59      	subs	r1, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fbb1 f3f3 	udiv	r3, r1, r3
 8002726:	1c59      	adds	r1, r3, #1
 8002728:	f640 73fc 	movw	r3, #4092	; 0xffc
 800272c:	400b      	ands	r3, r1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_I2C_Init+0x138>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1e59      	subs	r1, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002740:	3301      	adds	r3, #1
 8002742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002746:	e051      	b.n	80027ec <HAL_I2C_Init+0x1dc>
 8002748:	2304      	movs	r3, #4
 800274a:	e04f      	b.n	80027ec <HAL_I2C_Init+0x1dc>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d111      	bne.n	8002778 <HAL_I2C_Init+0x168>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1e58      	subs	r0, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	440b      	add	r3, r1
 8002762:	fbb0 f3f3 	udiv	r3, r0, r3
 8002766:	3301      	adds	r3, #1
 8002768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	e012      	b.n	800279e <HAL_I2C_Init+0x18e>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1e58      	subs	r0, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	0099      	lsls	r1, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	fbb0 f3f3 	udiv	r3, r0, r3
 800278e:	3301      	adds	r3, #1
 8002790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_I2C_Init+0x196>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e022      	b.n	80027ec <HAL_I2C_Init+0x1dc>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10e      	bne.n	80027cc <HAL_I2C_Init+0x1bc>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1e58      	subs	r0, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	440b      	add	r3, r1
 80027bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ca:	e00f      	b.n	80027ec <HAL_I2C_Init+0x1dc>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1e58      	subs	r0, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6859      	ldr	r1, [r3, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	0099      	lsls	r1, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e2:	3301      	adds	r3, #1
 80027e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	6809      	ldr	r1, [r1, #0]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800281a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6911      	ldr	r1, [r2, #16]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68d2      	ldr	r2, [r2, #12]
 8002826:	4311      	orrs	r1, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	430b      	orrs	r3, r1
 800282e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	000186a0 	.word	0x000186a0
 8002888:	001e847f 	.word	0x001e847f
 800288c:	003d08ff 	.word	0x003d08ff
 8002890:	431bde83 	.word	0x431bde83
 8002894:	10624dd3 	.word	0x10624dd3

08002898 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af02      	add	r7, sp, #8
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	461a      	mov	r2, r3
 80028a4:	460b      	mov	r3, r1
 80028a6:	817b      	strh	r3, [r7, #10]
 80028a8:	4613      	mov	r3, r2
 80028aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028ac:	f7ff f812 	bl	80018d4 <HAL_GetTick>
 80028b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	f040 80e0 	bne.w	8002a80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2319      	movs	r3, #25
 80028c6:	2201      	movs	r2, #1
 80028c8:	4970      	ldr	r1, [pc, #448]	; (8002a8c <HAL_I2C_Master_Transmit+0x1f4>)
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fa92 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
 80028d8:	e0d3      	b.n	8002a82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_I2C_Master_Transmit+0x50>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e0cc      	b.n	8002a82 <HAL_I2C_Master_Transmit+0x1ea>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d007      	beq.n	800290e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800291c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2221      	movs	r2, #33	; 0x21
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2210      	movs	r2, #16
 800292a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	893a      	ldrh	r2, [r7, #8]
 800293e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4a50      	ldr	r2, [pc, #320]	; (8002a90 <HAL_I2C_Master_Transmit+0x1f8>)
 800294e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002950:	8979      	ldrh	r1, [r7, #10]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	6a3a      	ldr	r2, [r7, #32]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f9ca 	bl	8002cf0 <I2C_MasterRequestWrite>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e08d      	b.n	8002a82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800297c:	e066      	b.n	8002a4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	6a39      	ldr	r1, [r7, #32]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fb50 	bl	8003028 <I2C_WaitOnTXEFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00d      	beq.n	80029aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2b04      	cmp	r3, #4
 8002994:	d107      	bne.n	80029a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e06b      	b.n	8002a82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d11b      	bne.n	8002a20 <HAL_I2C_Master_Transmit+0x188>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d017      	beq.n	8002a20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	6a39      	ldr	r1, [r7, #32]
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fb47 	bl	80030b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00d      	beq.n	8002a4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d107      	bne.n	8002a48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e01a      	b.n	8002a82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d194      	bne.n	800297e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e000      	b.n	8002a82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	00100002 	.word	0x00100002
 8002a90:	ffff0000 	.word	0xffff0000

08002a94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002aa4:	f7fe ff16 	bl	80018d4 <HAL_GetTick>
 8002aa8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	f040 8111 	bne.w	8002cde <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2319      	movs	r3, #25
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4988      	ldr	r1, [pc, #544]	; (8002ce8 <HAL_I2C_IsDeviceReady+0x254>)
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f994 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e104      	b.n	8002ce0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_I2C_IsDeviceReady+0x50>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e0fd      	b.n	8002ce0 <HAL_I2C_IsDeviceReady+0x24c>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d007      	beq.n	8002b0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2224      	movs	r2, #36	; 0x24
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a70      	ldr	r2, [pc, #448]	; (8002cec <HAL_I2C_IsDeviceReady+0x258>)
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f952 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b64:	d103      	bne.n	8002b6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e0b6      	b.n	8002ce0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b82:	f7fe fea7 	bl	80018d4 <HAL_GetTick>
 8002b86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bb6:	e025      	b.n	8002c04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bb8:	f7fe fe8c 	bl	80018d4 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d302      	bcc.n	8002bce <HAL_I2C_IsDeviceReady+0x13a>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	22a0      	movs	r2, #160	; 0xa0
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2ba0      	cmp	r3, #160	; 0xa0
 8002c0e:	d005      	beq.n	8002c1c <HAL_I2C_IsDeviceReady+0x188>
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_I2C_IsDeviceReady+0x188>
 8002c16:	7dbb      	ldrb	r3, [r7, #22]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0cd      	beq.n	8002bb8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d129      	bne.n	8002c86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2319      	movs	r3, #25
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4921      	ldr	r1, [pc, #132]	; (8002ce8 <HAL_I2C_IsDeviceReady+0x254>)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f8c6 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e036      	b.n	8002ce0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e02c      	b.n	8002ce0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2319      	movs	r3, #25
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	490f      	ldr	r1, [pc, #60]	; (8002ce8 <HAL_I2C_IsDeviceReady+0x254>)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f8a2 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e012      	b.n	8002ce0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	f4ff af32 	bcc.w	8002b2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
  }
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3720      	adds	r7, #32
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	00100002 	.word	0x00100002
 8002cec:	ffff0000 	.word	0xffff0000

08002cf0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d006      	beq.n	8002d1a <I2C_MasterRequestWrite+0x2a>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d003      	beq.n	8002d1a <I2C_MasterRequestWrite+0x2a>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d18:	d108      	bne.n	8002d2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e00b      	b.n	8002d44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	2b12      	cmp	r3, #18
 8002d32:	d107      	bne.n	8002d44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f84f 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6a:	d103      	bne.n	8002d74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e035      	b.n	8002de4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d80:	d108      	bne.n	8002d94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d82:	897b      	ldrh	r3, [r7, #10]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d90:	611a      	str	r2, [r3, #16]
 8002d92:	e01b      	b.n	8002dcc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d94:	897b      	ldrh	r3, [r7, #10]
 8002d96:	11db      	asrs	r3, r3, #7
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f003 0306 	and.w	r3, r3, #6
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f063 030f 	orn	r3, r3, #15
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	490e      	ldr	r1, [pc, #56]	; (8002dec <I2C_MasterRequestWrite+0xfc>)
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f898 	bl	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e010      	b.n	8002de4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dc2:	897b      	ldrh	r3, [r7, #10]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4907      	ldr	r1, [pc, #28]	; (8002df0 <I2C_MasterRequestWrite+0x100>)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f888 	bl	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	00010008 	.word	0x00010008
 8002df0:	00010002 	.word	0x00010002

08002df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e04:	e048      	b.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d044      	beq.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0e:	f7fe fd61 	bl	80018d4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d302      	bcc.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d139      	bne.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	0c1b      	lsrs	r3, r3, #16
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d10d      	bne.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	43da      	mvns	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	e00c      	b.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	43da      	mvns	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d116      	bne.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e023      	b.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d10d      	bne.n	8002ebe <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	43da      	mvns	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	e00c      	b.n	8002ed8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	43da      	mvns	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d093      	beq.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ef6:	e071      	b.n	8002fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f06:	d123      	bne.n	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f043 0204 	orr.w	r2, r3, #4
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e067      	b.n	8003020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f56:	d041      	beq.n	8002fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f58:	f7fe fcbc 	bl	80018d4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d302      	bcc.n	8002f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d136      	bne.n	8002fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d10c      	bne.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4013      	ands	r3, r2
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf14      	ite	ne
 8002f8a:	2301      	movne	r3, #1
 8002f8c:	2300      	moveq	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	e00b      	b.n	8002faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf14      	ite	ne
 8002fa4:	2301      	movne	r3, #1
 8002fa6:	2300      	moveq	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d016      	beq.n	8002fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	f043 0220 	orr.w	r2, r3, #32
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e021      	b.n	8003020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10c      	bne.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	43da      	mvns	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e00b      	b.n	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	43da      	mvns	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4013      	ands	r3, r2
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf14      	ite	ne
 8003012:	2301      	movne	r3, #1
 8003014:	2300      	moveq	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	f47f af6d 	bne.w	8002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003034:	e034      	b.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f886 	bl	8003148 <I2C_IsAcknowledgeFailed>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e034      	b.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d028      	beq.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7fe fc41 	bl	80018d4 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	429a      	cmp	r2, r3
 800305c:	d302      	bcc.n	8003064 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d11d      	bne.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	2b80      	cmp	r3, #128	; 0x80
 8003070:	d016      	beq.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f043 0220 	orr.w	r2, r3, #32
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e007      	b.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	2b80      	cmp	r3, #128	; 0x80
 80030ac:	d1c3      	bne.n	8003036 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c4:	e034      	b.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f83e 	bl	8003148 <I2C_IsAcknowledgeFailed>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e034      	b.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d028      	beq.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7fe fbf9 	bl	80018d4 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11d      	bne.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d016      	beq.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e007      	b.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b04      	cmp	r3, #4
 800313c:	d1c3      	bne.n	80030c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d11b      	bne.n	8003198 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003168:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f043 0204 	orr.w	r2, r3, #4
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d129      	bne.n	8003210 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2224      	movs	r2, #36	; 0x24
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0210 	bic.w	r2, r2, #16
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	e000      	b.n	8003212 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003210:	2302      	movs	r3, #2
  }
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800321e:	b480      	push	{r7}
 8003220:	b085      	sub	sp, #20
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b20      	cmp	r3, #32
 8003236:	d12a      	bne.n	800328e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2224      	movs	r2, #36	; 0x24
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003258:	89fb      	ldrh	r3, [r7, #14]
 800325a:	f023 030f 	bic.w	r3, r3, #15
 800325e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b29a      	uxth	r2, r3
 8003264:	89fb      	ldrh	r3, [r7, #14]
 8003266:	4313      	orrs	r3, r2
 8003268:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	89fa      	ldrh	r2, [r7, #14]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0201 	orr.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e000      	b.n	8003290 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800328e:	2302      	movs	r3, #2
  }
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e267      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d075      	beq.n	80033a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ba:	4b88      	ldr	r3, [pc, #544]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d00c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	4b85      	ldr	r3, [pc, #532]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d112      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d2:	4b82      	ldr	r3, [pc, #520]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032de:	d10b      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	4b7e      	ldr	r3, [pc, #504]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d05b      	beq.n	80033a4 <HAL_RCC_OscConfig+0x108>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d157      	bne.n	80033a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e242      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d106      	bne.n	8003310 <HAL_RCC_OscConfig+0x74>
 8003302:	4b76      	ldr	r3, [pc, #472]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a75      	ldr	r2, [pc, #468]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e01d      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x98>
 800331a:	4b70      	ldr	r3, [pc, #448]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6f      	ldr	r2, [pc, #444]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b6d      	ldr	r3, [pc, #436]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6c      	ldr	r2, [pc, #432]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003334:	4b69      	ldr	r3, [pc, #420]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a68      	ldr	r2, [pc, #416]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800333a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b66      	ldr	r3, [pc, #408]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a65      	ldr	r2, [pc, #404]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d013      	beq.n	800337c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe fabe 	bl	80018d4 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe faba 	bl	80018d4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e207      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b5b      	ldr	r3, [pc, #364]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0xc0>
 800337a:	e014      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe faaa 	bl	80018d4 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe faa6 	bl	80018d4 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1f3      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	4b51      	ldr	r3, [pc, #324]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0xe8>
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d063      	beq.n	800347a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b2:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d11c      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ca:	4b44      	ldr	r3, [pc, #272]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	4b41      	ldr	r3, [pc, #260]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e1c7      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4937      	ldr	r1, [pc, #220]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003402:	e03a      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340c:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <HAL_RCC_OscConfig+0x244>)
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe fa5f 	bl	80018d4 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341a:	f7fe fa5b 	bl	80018d4 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e1a8      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003438:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4925      	ldr	r1, [pc, #148]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCC_OscConfig+0x244>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe fa3e 	bl	80018d4 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345c:	f7fe fa3a 	bl	80018d4 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e187      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d036      	beq.n	80034f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <HAL_RCC_OscConfig+0x248>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fe fa1e 	bl	80018d4 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800349c:	f7fe fa1a 	bl	80018d4 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e167      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x200>
 80034ba:	e01b      	b.n	80034f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_RCC_OscConfig+0x248>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fe fa07 	bl	80018d4 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	e00e      	b.n	80034e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fe fa03 	bl	80018d4 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d907      	bls.n	80034e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e150      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
 80034dc:	40023800 	.word	0x40023800
 80034e0:	42470000 	.word	0x42470000
 80034e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	4b88      	ldr	r3, [pc, #544]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ea      	bne.n	80034ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8097 	beq.w	8003630 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003506:	4b81      	ldr	r3, [pc, #516]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10f      	bne.n	8003532 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	4b7d      	ldr	r3, [pc, #500]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a7c      	ldr	r2, [pc, #496]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	4b7a      	ldr	r3, [pc, #488]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b77      	ldr	r3, [pc, #476]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d118      	bne.n	8003570 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353e:	4b74      	ldr	r3, [pc, #464]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a73      	ldr	r2, [pc, #460]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354a:	f7fe f9c3 	bl	80018d4 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003552:	f7fe f9bf 	bl	80018d4 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e10c      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003564:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x2ea>
 8003578:	4b64      	ldr	r3, [pc, #400]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	4a63      	ldr	r2, [pc, #396]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6713      	str	r3, [r2, #112]	; 0x70
 8003584:	e01c      	b.n	80035c0 <HAL_RCC_OscConfig+0x324>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x30c>
 800358e:	4b5f      	ldr	r3, [pc, #380]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	4a5e      	ldr	r2, [pc, #376]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	6713      	str	r3, [r2, #112]	; 0x70
 800359a:	4b5c      	ldr	r3, [pc, #368]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a5b      	ldr	r2, [pc, #364]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0x324>
 80035a8:	4b58      	ldr	r3, [pc, #352]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	4a57      	ldr	r2, [pc, #348]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	6713      	str	r3, [r2, #112]	; 0x70
 80035b4:	4b55      	ldr	r3, [pc, #340]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	4a54      	ldr	r2, [pc, #336]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d015      	beq.n	80035f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fe f984 	bl	80018d4 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d0:	f7fe f980 	bl	80018d4 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e0cb      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e6:	4b49      	ldr	r3, [pc, #292]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0ee      	beq.n	80035d0 <HAL_RCC_OscConfig+0x334>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f4:	f7fe f96e 	bl	80018d4 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fe f96a 	bl	80018d4 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	; 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e0b5      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003612:	4b3e      	ldr	r3, [pc, #248]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ee      	bne.n	80035fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	4b39      	ldr	r3, [pc, #228]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	4a38      	ldr	r2, [pc, #224]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800362a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80a1 	beq.w	800377c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800363a:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b08      	cmp	r3, #8
 8003644:	d05c      	beq.n	8003700 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d141      	bne.n	80036d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b31      	ldr	r3, [pc, #196]	; (8003714 <HAL_RCC_OscConfig+0x478>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe f93e 	bl	80018d4 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe f93a 	bl	80018d4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e087      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	4b27      	ldr	r3, [pc, #156]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	019b      	lsls	r3, r3, #6
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	3b01      	subs	r3, #1
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	491b      	ldr	r1, [pc, #108]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a4:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x478>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe f913 	bl	80018d4 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fe f90f 	bl	80018d4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e05c      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x416>
 80036d0:	e054      	b.n	800377c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_RCC_OscConfig+0x478>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fe f8fc 	bl	80018d4 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fe f8f8 	bl	80018d4 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e045      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	4b06      	ldr	r3, [pc, #24]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x444>
 80036fe:	e03d      	b.n	800377c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d107      	bne.n	8003718 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e038      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
 800370c:	40023800 	.word	0x40023800
 8003710:	40007000 	.word	0x40007000
 8003714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <HAL_RCC_OscConfig+0x4ec>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d028      	beq.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d121      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d11a      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800374e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003750:	4293      	cmp	r3, r2
 8003752:	d111      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	3b01      	subs	r3, #1
 8003762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d107      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800

0800378c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0cc      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a0:	4b68      	ldr	r3, [pc, #416]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d90c      	bls.n	80037c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b65      	ldr	r3, [pc, #404]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b63      	ldr	r3, [pc, #396]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0b8      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d020      	beq.n	8003816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e0:	4b59      	ldr	r3, [pc, #356]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a58      	ldr	r2, [pc, #352]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f8:	4b53      	ldr	r3, [pc, #332]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a52      	ldr	r2, [pc, #328]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003804:	4b50      	ldr	r3, [pc, #320]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	494d      	ldr	r1, [pc, #308]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d044      	beq.n	80038ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d107      	bne.n	800383a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	4b47      	ldr	r3, [pc, #284]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d119      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e07f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d003      	beq.n	800384a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003846:	2b03      	cmp	r3, #3
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	4b3f      	ldr	r3, [pc, #252]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e06f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e067      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386a:	4b37      	ldr	r3, [pc, #220]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 0203 	bic.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4934      	ldr	r1, [pc, #208]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800387c:	f7fe f82a 	bl	80018d4 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fe f826 	bl	80018d4 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e04f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 020c 	and.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d1eb      	bne.n	8003884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ac:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d20c      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b22      	ldr	r3, [pc, #136]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e032      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4916      	ldr	r1, [pc, #88]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fe:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	490e      	ldr	r1, [pc, #56]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003912:	f000 f821 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8003916:	4602      	mov	r2, r0
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	490a      	ldr	r1, [pc, #40]	; (800394c <HAL_RCC_ClockConfig+0x1c0>)
 8003924:	5ccb      	ldrb	r3, [r1, r3]
 8003926:	fa22 f303 	lsr.w	r3, r2, r3
 800392a:	4a09      	ldr	r2, [pc, #36]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd ff8a 	bl	800184c <HAL_InitTick>

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023c00 	.word	0x40023c00
 8003948:	40023800 	.word	0x40023800
 800394c:	08005230 	.word	0x08005230
 8003950:	20000008 	.word	0x20000008
 8003954:	2000000c 	.word	0x2000000c

08003958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800395c:	b090      	sub	sp, #64	; 0x40
 800395e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	637b      	str	r3, [r7, #52]	; 0x34
 8003964:	2300      	movs	r3, #0
 8003966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003968:	2300      	movs	r3, #0
 800396a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003970:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d00d      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x40>
 800397c:	2b08      	cmp	r3, #8
 800397e:	f200 80a1 	bhi.w	8003ac4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x34>
 8003986:	2b04      	cmp	r3, #4
 8003988:	d003      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x3a>
 800398a:	e09b      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4b53      	ldr	r3, [pc, #332]	; (8003adc <HAL_RCC_GetSysClockFreq+0x184>)
 800398e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003990:	e09b      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003992:	4b53      	ldr	r3, [pc, #332]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003996:	e098      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003998:	4b4f      	ldr	r3, [pc, #316]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a2:	4b4d      	ldr	r3, [pc, #308]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d028      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ae:	4b4a      	ldr	r3, [pc, #296]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	2200      	movs	r2, #0
 80039b6:	623b      	str	r3, [r7, #32]
 80039b8:	627a      	str	r2, [r7, #36]	; 0x24
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039c0:	2100      	movs	r1, #0
 80039c2:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039c4:	fb03 f201 	mul.w	r2, r3, r1
 80039c8:	2300      	movs	r3, #0
 80039ca:	fb00 f303 	mul.w	r3, r0, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	4a43      	ldr	r2, [pc, #268]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039d2:	fba0 1202 	umull	r1, r2, r0, r2
 80039d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d8:	460a      	mov	r2, r1
 80039da:	62ba      	str	r2, [r7, #40]	; 0x28
 80039dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039de:	4413      	add	r3, r2
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e4:	2200      	movs	r2, #0
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	61fa      	str	r2, [r7, #28]
 80039ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039f2:	f7fc ff83 	bl	80008fc <__aeabi_uldivmod>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4613      	mov	r3, r2
 80039fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039fe:	e053      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a00:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	099b      	lsrs	r3, r3, #6
 8003a06:	2200      	movs	r2, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	617a      	str	r2, [r7, #20]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a12:	f04f 0b00 	mov.w	fp, #0
 8003a16:	4652      	mov	r2, sl
 8003a18:	465b      	mov	r3, fp
 8003a1a:	f04f 0000 	mov.w	r0, #0
 8003a1e:	f04f 0100 	mov.w	r1, #0
 8003a22:	0159      	lsls	r1, r3, #5
 8003a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a28:	0150      	lsls	r0, r2, #5
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	ebb2 080a 	subs.w	r8, r2, sl
 8003a32:	eb63 090b 	sbc.w	r9, r3, fp
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a4a:	ebb2 0408 	subs.w	r4, r2, r8
 8003a4e:	eb63 0509 	sbc.w	r5, r3, r9
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	00eb      	lsls	r3, r5, #3
 8003a5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a60:	00e2      	lsls	r2, r4, #3
 8003a62:	4614      	mov	r4, r2
 8003a64:	461d      	mov	r5, r3
 8003a66:	eb14 030a 	adds.w	r3, r4, sl
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	eb45 030b 	adc.w	r3, r5, fp
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a7e:	4629      	mov	r1, r5
 8003a80:	028b      	lsls	r3, r1, #10
 8003a82:	4621      	mov	r1, r4
 8003a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a88:	4621      	mov	r1, r4
 8003a8a:	028a      	lsls	r2, r1, #10
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	2200      	movs	r2, #0
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	60fa      	str	r2, [r7, #12]
 8003a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a9c:	f7fc ff2e 	bl	80008fc <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac2:	e002      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCC_GetSysClockFreq+0x184>)
 8003ac6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3740      	adds	r7, #64	; 0x40
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	00f42400 	.word	0x00f42400
 8003ae0:	017d7840 	.word	0x017d7840

08003ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000008 	.word	0x20000008

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b00:	f7ff fff0 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	0a9b      	lsrs	r3, r3, #10
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4903      	ldr	r1, [pc, #12]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	08005240 	.word	0x08005240

08003b24 <sniprintf>:
 8003b24:	b40c      	push	{r2, r3}
 8003b26:	b530      	push	{r4, r5, lr}
 8003b28:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <sniprintf+0x64>)
 8003b2a:	1e0c      	subs	r4, r1, #0
 8003b2c:	681d      	ldr	r5, [r3, #0]
 8003b2e:	b09d      	sub	sp, #116	; 0x74
 8003b30:	da08      	bge.n	8003b44 <sniprintf+0x20>
 8003b32:	238b      	movs	r3, #139	; 0x8b
 8003b34:	602b      	str	r3, [r5, #0]
 8003b36:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3a:	b01d      	add	sp, #116	; 0x74
 8003b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b40:	b002      	add	sp, #8
 8003b42:	4770      	bx	lr
 8003b44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003b48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b4c:	bf14      	ite	ne
 8003b4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003b52:	4623      	moveq	r3, r4
 8003b54:	9304      	str	r3, [sp, #16]
 8003b56:	9307      	str	r3, [sp, #28]
 8003b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b5c:	9002      	str	r0, [sp, #8]
 8003b5e:	9006      	str	r0, [sp, #24]
 8003b60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b66:	ab21      	add	r3, sp, #132	; 0x84
 8003b68:	a902      	add	r1, sp, #8
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	f000 f993 	bl	8003e98 <_svfiprintf_r>
 8003b72:	1c43      	adds	r3, r0, #1
 8003b74:	bfbc      	itt	lt
 8003b76:	238b      	movlt	r3, #139	; 0x8b
 8003b78:	602b      	strlt	r3, [r5, #0]
 8003b7a:	2c00      	cmp	r4, #0
 8003b7c:	d0dd      	beq.n	8003b3a <sniprintf+0x16>
 8003b7e:	9b02      	ldr	r3, [sp, #8]
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	e7d9      	b.n	8003b3a <sniprintf+0x16>
 8003b86:	bf00      	nop
 8003b88:	20000060 	.word	0x20000060

08003b8c <memset>:
 8003b8c:	4402      	add	r2, r0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d100      	bne.n	8003b96 <memset+0xa>
 8003b94:	4770      	bx	lr
 8003b96:	f803 1b01 	strb.w	r1, [r3], #1
 8003b9a:	e7f9      	b.n	8003b90 <memset+0x4>

08003b9c <__errno>:
 8003b9c:	4b01      	ldr	r3, [pc, #4]	; (8003ba4 <__errno+0x8>)
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	20000060 	.word	0x20000060

08003ba8 <__libc_init_array>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	4d0d      	ldr	r5, [pc, #52]	; (8003be0 <__libc_init_array+0x38>)
 8003bac:	4c0d      	ldr	r4, [pc, #52]	; (8003be4 <__libc_init_array+0x3c>)
 8003bae:	1b64      	subs	r4, r4, r5
 8003bb0:	10a4      	asrs	r4, r4, #2
 8003bb2:	2600      	movs	r6, #0
 8003bb4:	42a6      	cmp	r6, r4
 8003bb6:	d109      	bne.n	8003bcc <__libc_init_array+0x24>
 8003bb8:	4d0b      	ldr	r5, [pc, #44]	; (8003be8 <__libc_init_array+0x40>)
 8003bba:	4c0c      	ldr	r4, [pc, #48]	; (8003bec <__libc_init_array+0x44>)
 8003bbc:	f000 fc6a 	bl	8004494 <_init>
 8003bc0:	1b64      	subs	r4, r4, r5
 8003bc2:	10a4      	asrs	r4, r4, #2
 8003bc4:	2600      	movs	r6, #0
 8003bc6:	42a6      	cmp	r6, r4
 8003bc8:	d105      	bne.n	8003bd6 <__libc_init_array+0x2e>
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd0:	4798      	blx	r3
 8003bd2:	3601      	adds	r6, #1
 8003bd4:	e7ee      	b.n	8003bb4 <__libc_init_array+0xc>
 8003bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bda:	4798      	blx	r3
 8003bdc:	3601      	adds	r6, #1
 8003bde:	e7f2      	b.n	8003bc6 <__libc_init_array+0x1e>
 8003be0:	08005284 	.word	0x08005284
 8003be4:	08005284 	.word	0x08005284
 8003be8:	08005284 	.word	0x08005284
 8003bec:	08005288 	.word	0x08005288

08003bf0 <__retarget_lock_acquire_recursive>:
 8003bf0:	4770      	bx	lr

08003bf2 <__retarget_lock_release_recursive>:
 8003bf2:	4770      	bx	lr

08003bf4 <_free_r>:
 8003bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bf6:	2900      	cmp	r1, #0
 8003bf8:	d044      	beq.n	8003c84 <_free_r+0x90>
 8003bfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bfe:	9001      	str	r0, [sp, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f1a1 0404 	sub.w	r4, r1, #4
 8003c06:	bfb8      	it	lt
 8003c08:	18e4      	addlt	r4, r4, r3
 8003c0a:	f000 f8df 	bl	8003dcc <__malloc_lock>
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <_free_r+0x94>)
 8003c10:	9801      	ldr	r0, [sp, #4]
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	b933      	cbnz	r3, 8003c24 <_free_r+0x30>
 8003c16:	6063      	str	r3, [r4, #4]
 8003c18:	6014      	str	r4, [r2, #0]
 8003c1a:	b003      	add	sp, #12
 8003c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c20:	f000 b8da 	b.w	8003dd8 <__malloc_unlock>
 8003c24:	42a3      	cmp	r3, r4
 8003c26:	d908      	bls.n	8003c3a <_free_r+0x46>
 8003c28:	6825      	ldr	r5, [r4, #0]
 8003c2a:	1961      	adds	r1, r4, r5
 8003c2c:	428b      	cmp	r3, r1
 8003c2e:	bf01      	itttt	eq
 8003c30:	6819      	ldreq	r1, [r3, #0]
 8003c32:	685b      	ldreq	r3, [r3, #4]
 8003c34:	1949      	addeq	r1, r1, r5
 8003c36:	6021      	streq	r1, [r4, #0]
 8003c38:	e7ed      	b.n	8003c16 <_free_r+0x22>
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	b10b      	cbz	r3, 8003c44 <_free_r+0x50>
 8003c40:	42a3      	cmp	r3, r4
 8003c42:	d9fa      	bls.n	8003c3a <_free_r+0x46>
 8003c44:	6811      	ldr	r1, [r2, #0]
 8003c46:	1855      	adds	r5, r2, r1
 8003c48:	42a5      	cmp	r5, r4
 8003c4a:	d10b      	bne.n	8003c64 <_free_r+0x70>
 8003c4c:	6824      	ldr	r4, [r4, #0]
 8003c4e:	4421      	add	r1, r4
 8003c50:	1854      	adds	r4, r2, r1
 8003c52:	42a3      	cmp	r3, r4
 8003c54:	6011      	str	r1, [r2, #0]
 8003c56:	d1e0      	bne.n	8003c1a <_free_r+0x26>
 8003c58:	681c      	ldr	r4, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	6053      	str	r3, [r2, #4]
 8003c5e:	440c      	add	r4, r1
 8003c60:	6014      	str	r4, [r2, #0]
 8003c62:	e7da      	b.n	8003c1a <_free_r+0x26>
 8003c64:	d902      	bls.n	8003c6c <_free_r+0x78>
 8003c66:	230c      	movs	r3, #12
 8003c68:	6003      	str	r3, [r0, #0]
 8003c6a:	e7d6      	b.n	8003c1a <_free_r+0x26>
 8003c6c:	6825      	ldr	r5, [r4, #0]
 8003c6e:	1961      	adds	r1, r4, r5
 8003c70:	428b      	cmp	r3, r1
 8003c72:	bf04      	itt	eq
 8003c74:	6819      	ldreq	r1, [r3, #0]
 8003c76:	685b      	ldreq	r3, [r3, #4]
 8003c78:	6063      	str	r3, [r4, #4]
 8003c7a:	bf04      	itt	eq
 8003c7c:	1949      	addeq	r1, r1, r5
 8003c7e:	6021      	streq	r1, [r4, #0]
 8003c80:	6054      	str	r4, [r2, #4]
 8003c82:	e7ca      	b.n	8003c1a <_free_r+0x26>
 8003c84:	b003      	add	sp, #12
 8003c86:	bd30      	pop	{r4, r5, pc}
 8003c88:	2000066c 	.word	0x2000066c

08003c8c <sbrk_aligned>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	4e0e      	ldr	r6, [pc, #56]	; (8003cc8 <sbrk_aligned+0x3c>)
 8003c90:	460c      	mov	r4, r1
 8003c92:	6831      	ldr	r1, [r6, #0]
 8003c94:	4605      	mov	r5, r0
 8003c96:	b911      	cbnz	r1, 8003c9e <sbrk_aligned+0x12>
 8003c98:	f000 fba6 	bl	80043e8 <_sbrk_r>
 8003c9c:	6030      	str	r0, [r6, #0]
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f000 fba1 	bl	80043e8 <_sbrk_r>
 8003ca6:	1c43      	adds	r3, r0, #1
 8003ca8:	d00a      	beq.n	8003cc0 <sbrk_aligned+0x34>
 8003caa:	1cc4      	adds	r4, r0, #3
 8003cac:	f024 0403 	bic.w	r4, r4, #3
 8003cb0:	42a0      	cmp	r0, r4
 8003cb2:	d007      	beq.n	8003cc4 <sbrk_aligned+0x38>
 8003cb4:	1a21      	subs	r1, r4, r0
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	f000 fb96 	bl	80043e8 <_sbrk_r>
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d101      	bne.n	8003cc4 <sbrk_aligned+0x38>
 8003cc0:	f04f 34ff 	mov.w	r4, #4294967295
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	20000670 	.word	0x20000670

08003ccc <_malloc_r>:
 8003ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cd0:	1ccd      	adds	r5, r1, #3
 8003cd2:	f025 0503 	bic.w	r5, r5, #3
 8003cd6:	3508      	adds	r5, #8
 8003cd8:	2d0c      	cmp	r5, #12
 8003cda:	bf38      	it	cc
 8003cdc:	250c      	movcc	r5, #12
 8003cde:	2d00      	cmp	r5, #0
 8003ce0:	4607      	mov	r7, r0
 8003ce2:	db01      	blt.n	8003ce8 <_malloc_r+0x1c>
 8003ce4:	42a9      	cmp	r1, r5
 8003ce6:	d905      	bls.n	8003cf4 <_malloc_r+0x28>
 8003ce8:	230c      	movs	r3, #12
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	2600      	movs	r6, #0
 8003cee:	4630      	mov	r0, r6
 8003cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003dc8 <_malloc_r+0xfc>
 8003cf8:	f000 f868 	bl	8003dcc <__malloc_lock>
 8003cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8003d00:	461c      	mov	r4, r3
 8003d02:	bb5c      	cbnz	r4, 8003d5c <_malloc_r+0x90>
 8003d04:	4629      	mov	r1, r5
 8003d06:	4638      	mov	r0, r7
 8003d08:	f7ff ffc0 	bl	8003c8c <sbrk_aligned>
 8003d0c:	1c43      	adds	r3, r0, #1
 8003d0e:	4604      	mov	r4, r0
 8003d10:	d155      	bne.n	8003dbe <_malloc_r+0xf2>
 8003d12:	f8d8 4000 	ldr.w	r4, [r8]
 8003d16:	4626      	mov	r6, r4
 8003d18:	2e00      	cmp	r6, #0
 8003d1a:	d145      	bne.n	8003da8 <_malloc_r+0xdc>
 8003d1c:	2c00      	cmp	r4, #0
 8003d1e:	d048      	beq.n	8003db2 <_malloc_r+0xe6>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	4631      	mov	r1, r6
 8003d24:	4638      	mov	r0, r7
 8003d26:	eb04 0903 	add.w	r9, r4, r3
 8003d2a:	f000 fb5d 	bl	80043e8 <_sbrk_r>
 8003d2e:	4581      	cmp	r9, r0
 8003d30:	d13f      	bne.n	8003db2 <_malloc_r+0xe6>
 8003d32:	6821      	ldr	r1, [r4, #0]
 8003d34:	1a6d      	subs	r5, r5, r1
 8003d36:	4629      	mov	r1, r5
 8003d38:	4638      	mov	r0, r7
 8003d3a:	f7ff ffa7 	bl	8003c8c <sbrk_aligned>
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d037      	beq.n	8003db2 <_malloc_r+0xe6>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	442b      	add	r3, r5
 8003d46:	6023      	str	r3, [r4, #0]
 8003d48:	f8d8 3000 	ldr.w	r3, [r8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d038      	beq.n	8003dc2 <_malloc_r+0xf6>
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	42a2      	cmp	r2, r4
 8003d54:	d12b      	bne.n	8003dae <_malloc_r+0xe2>
 8003d56:	2200      	movs	r2, #0
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	e00f      	b.n	8003d7c <_malloc_r+0xb0>
 8003d5c:	6822      	ldr	r2, [r4, #0]
 8003d5e:	1b52      	subs	r2, r2, r5
 8003d60:	d41f      	bmi.n	8003da2 <_malloc_r+0xd6>
 8003d62:	2a0b      	cmp	r2, #11
 8003d64:	d917      	bls.n	8003d96 <_malloc_r+0xca>
 8003d66:	1961      	adds	r1, r4, r5
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	6025      	str	r5, [r4, #0]
 8003d6c:	bf18      	it	ne
 8003d6e:	6059      	strne	r1, [r3, #4]
 8003d70:	6863      	ldr	r3, [r4, #4]
 8003d72:	bf08      	it	eq
 8003d74:	f8c8 1000 	streq.w	r1, [r8]
 8003d78:	5162      	str	r2, [r4, r5]
 8003d7a:	604b      	str	r3, [r1, #4]
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	f104 060b 	add.w	r6, r4, #11
 8003d82:	f000 f829 	bl	8003dd8 <__malloc_unlock>
 8003d86:	f026 0607 	bic.w	r6, r6, #7
 8003d8a:	1d23      	adds	r3, r4, #4
 8003d8c:	1af2      	subs	r2, r6, r3
 8003d8e:	d0ae      	beq.n	8003cee <_malloc_r+0x22>
 8003d90:	1b9b      	subs	r3, r3, r6
 8003d92:	50a3      	str	r3, [r4, r2]
 8003d94:	e7ab      	b.n	8003cee <_malloc_r+0x22>
 8003d96:	42a3      	cmp	r3, r4
 8003d98:	6862      	ldr	r2, [r4, #4]
 8003d9a:	d1dd      	bne.n	8003d58 <_malloc_r+0x8c>
 8003d9c:	f8c8 2000 	str.w	r2, [r8]
 8003da0:	e7ec      	b.n	8003d7c <_malloc_r+0xb0>
 8003da2:	4623      	mov	r3, r4
 8003da4:	6864      	ldr	r4, [r4, #4]
 8003da6:	e7ac      	b.n	8003d02 <_malloc_r+0x36>
 8003da8:	4634      	mov	r4, r6
 8003daa:	6876      	ldr	r6, [r6, #4]
 8003dac:	e7b4      	b.n	8003d18 <_malloc_r+0x4c>
 8003dae:	4613      	mov	r3, r2
 8003db0:	e7cc      	b.n	8003d4c <_malloc_r+0x80>
 8003db2:	230c      	movs	r3, #12
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4638      	mov	r0, r7
 8003db8:	f000 f80e 	bl	8003dd8 <__malloc_unlock>
 8003dbc:	e797      	b.n	8003cee <_malloc_r+0x22>
 8003dbe:	6025      	str	r5, [r4, #0]
 8003dc0:	e7dc      	b.n	8003d7c <_malloc_r+0xb0>
 8003dc2:	605b      	str	r3, [r3, #4]
 8003dc4:	deff      	udf	#255	; 0xff
 8003dc6:	bf00      	nop
 8003dc8:	2000066c 	.word	0x2000066c

08003dcc <__malloc_lock>:
 8003dcc:	4801      	ldr	r0, [pc, #4]	; (8003dd4 <__malloc_lock+0x8>)
 8003dce:	f7ff bf0f 	b.w	8003bf0 <__retarget_lock_acquire_recursive>
 8003dd2:	bf00      	nop
 8003dd4:	20000668 	.word	0x20000668

08003dd8 <__malloc_unlock>:
 8003dd8:	4801      	ldr	r0, [pc, #4]	; (8003de0 <__malloc_unlock+0x8>)
 8003dda:	f7ff bf0a 	b.w	8003bf2 <__retarget_lock_release_recursive>
 8003dde:	bf00      	nop
 8003de0:	20000668 	.word	0x20000668

08003de4 <__ssputs_r>:
 8003de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de8:	688e      	ldr	r6, [r1, #8]
 8003dea:	461f      	mov	r7, r3
 8003dec:	42be      	cmp	r6, r7
 8003dee:	680b      	ldr	r3, [r1, #0]
 8003df0:	4682      	mov	sl, r0
 8003df2:	460c      	mov	r4, r1
 8003df4:	4690      	mov	r8, r2
 8003df6:	d82c      	bhi.n	8003e52 <__ssputs_r+0x6e>
 8003df8:	898a      	ldrh	r2, [r1, #12]
 8003dfa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dfe:	d026      	beq.n	8003e4e <__ssputs_r+0x6a>
 8003e00:	6965      	ldr	r5, [r4, #20]
 8003e02:	6909      	ldr	r1, [r1, #16]
 8003e04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e08:	eba3 0901 	sub.w	r9, r3, r1
 8003e0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e10:	1c7b      	adds	r3, r7, #1
 8003e12:	444b      	add	r3, r9
 8003e14:	106d      	asrs	r5, r5, #1
 8003e16:	429d      	cmp	r5, r3
 8003e18:	bf38      	it	cc
 8003e1a:	461d      	movcc	r5, r3
 8003e1c:	0553      	lsls	r3, r2, #21
 8003e1e:	d527      	bpl.n	8003e70 <__ssputs_r+0x8c>
 8003e20:	4629      	mov	r1, r5
 8003e22:	f7ff ff53 	bl	8003ccc <_malloc_r>
 8003e26:	4606      	mov	r6, r0
 8003e28:	b360      	cbz	r0, 8003e84 <__ssputs_r+0xa0>
 8003e2a:	6921      	ldr	r1, [r4, #16]
 8003e2c:	464a      	mov	r2, r9
 8003e2e:	f000 faeb 	bl	8004408 <memcpy>
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3c:	81a3      	strh	r3, [r4, #12]
 8003e3e:	6126      	str	r6, [r4, #16]
 8003e40:	6165      	str	r5, [r4, #20]
 8003e42:	444e      	add	r6, r9
 8003e44:	eba5 0509 	sub.w	r5, r5, r9
 8003e48:	6026      	str	r6, [r4, #0]
 8003e4a:	60a5      	str	r5, [r4, #8]
 8003e4c:	463e      	mov	r6, r7
 8003e4e:	42be      	cmp	r6, r7
 8003e50:	d900      	bls.n	8003e54 <__ssputs_r+0x70>
 8003e52:	463e      	mov	r6, r7
 8003e54:	6820      	ldr	r0, [r4, #0]
 8003e56:	4632      	mov	r2, r6
 8003e58:	4641      	mov	r1, r8
 8003e5a:	f000 faab 	bl	80043b4 <memmove>
 8003e5e:	68a3      	ldr	r3, [r4, #8]
 8003e60:	1b9b      	subs	r3, r3, r6
 8003e62:	60a3      	str	r3, [r4, #8]
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	4433      	add	r3, r6
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e70:	462a      	mov	r2, r5
 8003e72:	f000 fad7 	bl	8004424 <_realloc_r>
 8003e76:	4606      	mov	r6, r0
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d1e0      	bne.n	8003e3e <__ssputs_r+0x5a>
 8003e7c:	6921      	ldr	r1, [r4, #16]
 8003e7e:	4650      	mov	r0, sl
 8003e80:	f7ff feb8 	bl	8003bf4 <_free_r>
 8003e84:	230c      	movs	r3, #12
 8003e86:	f8ca 3000 	str.w	r3, [sl]
 8003e8a:	89a3      	ldrh	r3, [r4, #12]
 8003e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e90:	81a3      	strh	r3, [r4, #12]
 8003e92:	f04f 30ff 	mov.w	r0, #4294967295
 8003e96:	e7e9      	b.n	8003e6c <__ssputs_r+0x88>

08003e98 <_svfiprintf_r>:
 8003e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9c:	4698      	mov	r8, r3
 8003e9e:	898b      	ldrh	r3, [r1, #12]
 8003ea0:	061b      	lsls	r3, r3, #24
 8003ea2:	b09d      	sub	sp, #116	; 0x74
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	460d      	mov	r5, r1
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	d50e      	bpl.n	8003eca <_svfiprintf_r+0x32>
 8003eac:	690b      	ldr	r3, [r1, #16]
 8003eae:	b963      	cbnz	r3, 8003eca <_svfiprintf_r+0x32>
 8003eb0:	2140      	movs	r1, #64	; 0x40
 8003eb2:	f7ff ff0b 	bl	8003ccc <_malloc_r>
 8003eb6:	6028      	str	r0, [r5, #0]
 8003eb8:	6128      	str	r0, [r5, #16]
 8003eba:	b920      	cbnz	r0, 8003ec6 <_svfiprintf_r+0x2e>
 8003ebc:	230c      	movs	r3, #12
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec4:	e0d0      	b.n	8004068 <_svfiprintf_r+0x1d0>
 8003ec6:	2340      	movs	r3, #64	; 0x40
 8003ec8:	616b      	str	r3, [r5, #20]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ece:	2320      	movs	r3, #32
 8003ed0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ed4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ed8:	2330      	movs	r3, #48	; 0x30
 8003eda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004080 <_svfiprintf_r+0x1e8>
 8003ede:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ee2:	f04f 0901 	mov.w	r9, #1
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	469a      	mov	sl, r3
 8003eea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eee:	b10a      	cbz	r2, 8003ef4 <_svfiprintf_r+0x5c>
 8003ef0:	2a25      	cmp	r2, #37	; 0x25
 8003ef2:	d1f9      	bne.n	8003ee8 <_svfiprintf_r+0x50>
 8003ef4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ef8:	d00b      	beq.n	8003f12 <_svfiprintf_r+0x7a>
 8003efa:	465b      	mov	r3, fp
 8003efc:	4622      	mov	r2, r4
 8003efe:	4629      	mov	r1, r5
 8003f00:	4638      	mov	r0, r7
 8003f02:	f7ff ff6f 	bl	8003de4 <__ssputs_r>
 8003f06:	3001      	adds	r0, #1
 8003f08:	f000 80a9 	beq.w	800405e <_svfiprintf_r+0x1c6>
 8003f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f0e:	445a      	add	r2, fp
 8003f10:	9209      	str	r2, [sp, #36]	; 0x24
 8003f12:	f89a 3000 	ldrb.w	r3, [sl]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 80a1 	beq.w	800405e <_svfiprintf_r+0x1c6>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f26:	f10a 0a01 	add.w	sl, sl, #1
 8003f2a:	9304      	str	r3, [sp, #16]
 8003f2c:	9307      	str	r3, [sp, #28]
 8003f2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f32:	931a      	str	r3, [sp, #104]	; 0x68
 8003f34:	4654      	mov	r4, sl
 8003f36:	2205      	movs	r2, #5
 8003f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f3c:	4850      	ldr	r0, [pc, #320]	; (8004080 <_svfiprintf_r+0x1e8>)
 8003f3e:	f7fc f957 	bl	80001f0 <memchr>
 8003f42:	9a04      	ldr	r2, [sp, #16]
 8003f44:	b9d8      	cbnz	r0, 8003f7e <_svfiprintf_r+0xe6>
 8003f46:	06d0      	lsls	r0, r2, #27
 8003f48:	bf44      	itt	mi
 8003f4a:	2320      	movmi	r3, #32
 8003f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f50:	0711      	lsls	r1, r2, #28
 8003f52:	bf44      	itt	mi
 8003f54:	232b      	movmi	r3, #43	; 0x2b
 8003f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f60:	d015      	beq.n	8003f8e <_svfiprintf_r+0xf6>
 8003f62:	9a07      	ldr	r2, [sp, #28]
 8003f64:	4654      	mov	r4, sl
 8003f66:	2000      	movs	r0, #0
 8003f68:	f04f 0c0a 	mov.w	ip, #10
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f72:	3b30      	subs	r3, #48	; 0x30
 8003f74:	2b09      	cmp	r3, #9
 8003f76:	d94d      	bls.n	8004014 <_svfiprintf_r+0x17c>
 8003f78:	b1b0      	cbz	r0, 8003fa8 <_svfiprintf_r+0x110>
 8003f7a:	9207      	str	r2, [sp, #28]
 8003f7c:	e014      	b.n	8003fa8 <_svfiprintf_r+0x110>
 8003f7e:	eba0 0308 	sub.w	r3, r0, r8
 8003f82:	fa09 f303 	lsl.w	r3, r9, r3
 8003f86:	4313      	orrs	r3, r2
 8003f88:	9304      	str	r3, [sp, #16]
 8003f8a:	46a2      	mov	sl, r4
 8003f8c:	e7d2      	b.n	8003f34 <_svfiprintf_r+0x9c>
 8003f8e:	9b03      	ldr	r3, [sp, #12]
 8003f90:	1d19      	adds	r1, r3, #4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	9103      	str	r1, [sp, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bfbb      	ittet	lt
 8003f9a:	425b      	neglt	r3, r3
 8003f9c:	f042 0202 	orrlt.w	r2, r2, #2
 8003fa0:	9307      	strge	r3, [sp, #28]
 8003fa2:	9307      	strlt	r3, [sp, #28]
 8003fa4:	bfb8      	it	lt
 8003fa6:	9204      	strlt	r2, [sp, #16]
 8003fa8:	7823      	ldrb	r3, [r4, #0]
 8003faa:	2b2e      	cmp	r3, #46	; 0x2e
 8003fac:	d10c      	bne.n	8003fc8 <_svfiprintf_r+0x130>
 8003fae:	7863      	ldrb	r3, [r4, #1]
 8003fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb2:	d134      	bne.n	800401e <_svfiprintf_r+0x186>
 8003fb4:	9b03      	ldr	r3, [sp, #12]
 8003fb6:	1d1a      	adds	r2, r3, #4
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	9203      	str	r2, [sp, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	bfb8      	it	lt
 8003fc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fc4:	3402      	adds	r4, #2
 8003fc6:	9305      	str	r3, [sp, #20]
 8003fc8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004090 <_svfiprintf_r+0x1f8>
 8003fcc:	7821      	ldrb	r1, [r4, #0]
 8003fce:	2203      	movs	r2, #3
 8003fd0:	4650      	mov	r0, sl
 8003fd2:	f7fc f90d 	bl	80001f0 <memchr>
 8003fd6:	b138      	cbz	r0, 8003fe8 <_svfiprintf_r+0x150>
 8003fd8:	9b04      	ldr	r3, [sp, #16]
 8003fda:	eba0 000a 	sub.w	r0, r0, sl
 8003fde:	2240      	movs	r2, #64	; 0x40
 8003fe0:	4082      	lsls	r2, r0
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	3401      	adds	r4, #1
 8003fe6:	9304      	str	r3, [sp, #16]
 8003fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fec:	4825      	ldr	r0, [pc, #148]	; (8004084 <_svfiprintf_r+0x1ec>)
 8003fee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ff2:	2206      	movs	r2, #6
 8003ff4:	f7fc f8fc 	bl	80001f0 <memchr>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d038      	beq.n	800406e <_svfiprintf_r+0x1d6>
 8003ffc:	4b22      	ldr	r3, [pc, #136]	; (8004088 <_svfiprintf_r+0x1f0>)
 8003ffe:	bb1b      	cbnz	r3, 8004048 <_svfiprintf_r+0x1b0>
 8004000:	9b03      	ldr	r3, [sp, #12]
 8004002:	3307      	adds	r3, #7
 8004004:	f023 0307 	bic.w	r3, r3, #7
 8004008:	3308      	adds	r3, #8
 800400a:	9303      	str	r3, [sp, #12]
 800400c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800400e:	4433      	add	r3, r6
 8004010:	9309      	str	r3, [sp, #36]	; 0x24
 8004012:	e768      	b.n	8003ee6 <_svfiprintf_r+0x4e>
 8004014:	fb0c 3202 	mla	r2, ip, r2, r3
 8004018:	460c      	mov	r4, r1
 800401a:	2001      	movs	r0, #1
 800401c:	e7a6      	b.n	8003f6c <_svfiprintf_r+0xd4>
 800401e:	2300      	movs	r3, #0
 8004020:	3401      	adds	r4, #1
 8004022:	9305      	str	r3, [sp, #20]
 8004024:	4619      	mov	r1, r3
 8004026:	f04f 0c0a 	mov.w	ip, #10
 800402a:	4620      	mov	r0, r4
 800402c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004030:	3a30      	subs	r2, #48	; 0x30
 8004032:	2a09      	cmp	r2, #9
 8004034:	d903      	bls.n	800403e <_svfiprintf_r+0x1a6>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0c6      	beq.n	8003fc8 <_svfiprintf_r+0x130>
 800403a:	9105      	str	r1, [sp, #20]
 800403c:	e7c4      	b.n	8003fc8 <_svfiprintf_r+0x130>
 800403e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004042:	4604      	mov	r4, r0
 8004044:	2301      	movs	r3, #1
 8004046:	e7f0      	b.n	800402a <_svfiprintf_r+0x192>
 8004048:	ab03      	add	r3, sp, #12
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	462a      	mov	r2, r5
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <_svfiprintf_r+0x1f4>)
 8004050:	a904      	add	r1, sp, #16
 8004052:	4638      	mov	r0, r7
 8004054:	f3af 8000 	nop.w
 8004058:	1c42      	adds	r2, r0, #1
 800405a:	4606      	mov	r6, r0
 800405c:	d1d6      	bne.n	800400c <_svfiprintf_r+0x174>
 800405e:	89ab      	ldrh	r3, [r5, #12]
 8004060:	065b      	lsls	r3, r3, #25
 8004062:	f53f af2d 	bmi.w	8003ec0 <_svfiprintf_r+0x28>
 8004066:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004068:	b01d      	add	sp, #116	; 0x74
 800406a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800406e:	ab03      	add	r3, sp, #12
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	462a      	mov	r2, r5
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <_svfiprintf_r+0x1f4>)
 8004076:	a904      	add	r1, sp, #16
 8004078:	4638      	mov	r0, r7
 800407a:	f000 f879 	bl	8004170 <_printf_i>
 800407e:	e7eb      	b.n	8004058 <_svfiprintf_r+0x1c0>
 8004080:	08005248 	.word	0x08005248
 8004084:	08005252 	.word	0x08005252
 8004088:	00000000 	.word	0x00000000
 800408c:	08003de5 	.word	0x08003de5
 8004090:	0800524e 	.word	0x0800524e

08004094 <_printf_common>:
 8004094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004098:	4616      	mov	r6, r2
 800409a:	4699      	mov	r9, r3
 800409c:	688a      	ldr	r2, [r1, #8]
 800409e:	690b      	ldr	r3, [r1, #16]
 80040a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040a4:	4293      	cmp	r3, r2
 80040a6:	bfb8      	it	lt
 80040a8:	4613      	movlt	r3, r2
 80040aa:	6033      	str	r3, [r6, #0]
 80040ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040b0:	4607      	mov	r7, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	b10a      	cbz	r2, 80040ba <_printf_common+0x26>
 80040b6:	3301      	adds	r3, #1
 80040b8:	6033      	str	r3, [r6, #0]
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	0699      	lsls	r1, r3, #26
 80040be:	bf42      	ittt	mi
 80040c0:	6833      	ldrmi	r3, [r6, #0]
 80040c2:	3302      	addmi	r3, #2
 80040c4:	6033      	strmi	r3, [r6, #0]
 80040c6:	6825      	ldr	r5, [r4, #0]
 80040c8:	f015 0506 	ands.w	r5, r5, #6
 80040cc:	d106      	bne.n	80040dc <_printf_common+0x48>
 80040ce:	f104 0a19 	add.w	sl, r4, #25
 80040d2:	68e3      	ldr	r3, [r4, #12]
 80040d4:	6832      	ldr	r2, [r6, #0]
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	42ab      	cmp	r3, r5
 80040da:	dc26      	bgt.n	800412a <_printf_common+0x96>
 80040dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040e0:	1e13      	subs	r3, r2, #0
 80040e2:	6822      	ldr	r2, [r4, #0]
 80040e4:	bf18      	it	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	0692      	lsls	r2, r2, #26
 80040ea:	d42b      	bmi.n	8004144 <_printf_common+0xb0>
 80040ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040f0:	4649      	mov	r1, r9
 80040f2:	4638      	mov	r0, r7
 80040f4:	47c0      	blx	r8
 80040f6:	3001      	adds	r0, #1
 80040f8:	d01e      	beq.n	8004138 <_printf_common+0xa4>
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	6922      	ldr	r2, [r4, #16]
 80040fe:	f003 0306 	and.w	r3, r3, #6
 8004102:	2b04      	cmp	r3, #4
 8004104:	bf02      	ittt	eq
 8004106:	68e5      	ldreq	r5, [r4, #12]
 8004108:	6833      	ldreq	r3, [r6, #0]
 800410a:	1aed      	subeq	r5, r5, r3
 800410c:	68a3      	ldr	r3, [r4, #8]
 800410e:	bf0c      	ite	eq
 8004110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004114:	2500      	movne	r5, #0
 8004116:	4293      	cmp	r3, r2
 8004118:	bfc4      	itt	gt
 800411a:	1a9b      	subgt	r3, r3, r2
 800411c:	18ed      	addgt	r5, r5, r3
 800411e:	2600      	movs	r6, #0
 8004120:	341a      	adds	r4, #26
 8004122:	42b5      	cmp	r5, r6
 8004124:	d11a      	bne.n	800415c <_printf_common+0xc8>
 8004126:	2000      	movs	r0, #0
 8004128:	e008      	b.n	800413c <_printf_common+0xa8>
 800412a:	2301      	movs	r3, #1
 800412c:	4652      	mov	r2, sl
 800412e:	4649      	mov	r1, r9
 8004130:	4638      	mov	r0, r7
 8004132:	47c0      	blx	r8
 8004134:	3001      	adds	r0, #1
 8004136:	d103      	bne.n	8004140 <_printf_common+0xac>
 8004138:	f04f 30ff 	mov.w	r0, #4294967295
 800413c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004140:	3501      	adds	r5, #1
 8004142:	e7c6      	b.n	80040d2 <_printf_common+0x3e>
 8004144:	18e1      	adds	r1, r4, r3
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	2030      	movs	r0, #48	; 0x30
 800414a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800414e:	4422      	add	r2, r4
 8004150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004158:	3302      	adds	r3, #2
 800415a:	e7c7      	b.n	80040ec <_printf_common+0x58>
 800415c:	2301      	movs	r3, #1
 800415e:	4622      	mov	r2, r4
 8004160:	4649      	mov	r1, r9
 8004162:	4638      	mov	r0, r7
 8004164:	47c0      	blx	r8
 8004166:	3001      	adds	r0, #1
 8004168:	d0e6      	beq.n	8004138 <_printf_common+0xa4>
 800416a:	3601      	adds	r6, #1
 800416c:	e7d9      	b.n	8004122 <_printf_common+0x8e>
	...

08004170 <_printf_i>:
 8004170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004174:	7e0f      	ldrb	r7, [r1, #24]
 8004176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004178:	2f78      	cmp	r7, #120	; 0x78
 800417a:	4691      	mov	r9, r2
 800417c:	4680      	mov	r8, r0
 800417e:	460c      	mov	r4, r1
 8004180:	469a      	mov	sl, r3
 8004182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004186:	d807      	bhi.n	8004198 <_printf_i+0x28>
 8004188:	2f62      	cmp	r7, #98	; 0x62
 800418a:	d80a      	bhi.n	80041a2 <_printf_i+0x32>
 800418c:	2f00      	cmp	r7, #0
 800418e:	f000 80d4 	beq.w	800433a <_printf_i+0x1ca>
 8004192:	2f58      	cmp	r7, #88	; 0x58
 8004194:	f000 80c0 	beq.w	8004318 <_printf_i+0x1a8>
 8004198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800419c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041a0:	e03a      	b.n	8004218 <_printf_i+0xa8>
 80041a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041a6:	2b15      	cmp	r3, #21
 80041a8:	d8f6      	bhi.n	8004198 <_printf_i+0x28>
 80041aa:	a101      	add	r1, pc, #4	; (adr r1, 80041b0 <_printf_i+0x40>)
 80041ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041b0:	08004209 	.word	0x08004209
 80041b4:	0800421d 	.word	0x0800421d
 80041b8:	08004199 	.word	0x08004199
 80041bc:	08004199 	.word	0x08004199
 80041c0:	08004199 	.word	0x08004199
 80041c4:	08004199 	.word	0x08004199
 80041c8:	0800421d 	.word	0x0800421d
 80041cc:	08004199 	.word	0x08004199
 80041d0:	08004199 	.word	0x08004199
 80041d4:	08004199 	.word	0x08004199
 80041d8:	08004199 	.word	0x08004199
 80041dc:	08004321 	.word	0x08004321
 80041e0:	08004249 	.word	0x08004249
 80041e4:	080042db 	.word	0x080042db
 80041e8:	08004199 	.word	0x08004199
 80041ec:	08004199 	.word	0x08004199
 80041f0:	08004343 	.word	0x08004343
 80041f4:	08004199 	.word	0x08004199
 80041f8:	08004249 	.word	0x08004249
 80041fc:	08004199 	.word	0x08004199
 8004200:	08004199 	.word	0x08004199
 8004204:	080042e3 	.word	0x080042e3
 8004208:	682b      	ldr	r3, [r5, #0]
 800420a:	1d1a      	adds	r2, r3, #4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	602a      	str	r2, [r5, #0]
 8004210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004218:	2301      	movs	r3, #1
 800421a:	e09f      	b.n	800435c <_printf_i+0x1ec>
 800421c:	6820      	ldr	r0, [r4, #0]
 800421e:	682b      	ldr	r3, [r5, #0]
 8004220:	0607      	lsls	r7, r0, #24
 8004222:	f103 0104 	add.w	r1, r3, #4
 8004226:	6029      	str	r1, [r5, #0]
 8004228:	d501      	bpl.n	800422e <_printf_i+0xbe>
 800422a:	681e      	ldr	r6, [r3, #0]
 800422c:	e003      	b.n	8004236 <_printf_i+0xc6>
 800422e:	0646      	lsls	r6, r0, #25
 8004230:	d5fb      	bpl.n	800422a <_printf_i+0xba>
 8004232:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004236:	2e00      	cmp	r6, #0
 8004238:	da03      	bge.n	8004242 <_printf_i+0xd2>
 800423a:	232d      	movs	r3, #45	; 0x2d
 800423c:	4276      	negs	r6, r6
 800423e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004242:	485a      	ldr	r0, [pc, #360]	; (80043ac <_printf_i+0x23c>)
 8004244:	230a      	movs	r3, #10
 8004246:	e012      	b.n	800426e <_printf_i+0xfe>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	6820      	ldr	r0, [r4, #0]
 800424c:	1d19      	adds	r1, r3, #4
 800424e:	6029      	str	r1, [r5, #0]
 8004250:	0605      	lsls	r5, r0, #24
 8004252:	d501      	bpl.n	8004258 <_printf_i+0xe8>
 8004254:	681e      	ldr	r6, [r3, #0]
 8004256:	e002      	b.n	800425e <_printf_i+0xee>
 8004258:	0641      	lsls	r1, r0, #25
 800425a:	d5fb      	bpl.n	8004254 <_printf_i+0xe4>
 800425c:	881e      	ldrh	r6, [r3, #0]
 800425e:	4853      	ldr	r0, [pc, #332]	; (80043ac <_printf_i+0x23c>)
 8004260:	2f6f      	cmp	r7, #111	; 0x6f
 8004262:	bf0c      	ite	eq
 8004264:	2308      	moveq	r3, #8
 8004266:	230a      	movne	r3, #10
 8004268:	2100      	movs	r1, #0
 800426a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800426e:	6865      	ldr	r5, [r4, #4]
 8004270:	60a5      	str	r5, [r4, #8]
 8004272:	2d00      	cmp	r5, #0
 8004274:	bfa2      	ittt	ge
 8004276:	6821      	ldrge	r1, [r4, #0]
 8004278:	f021 0104 	bicge.w	r1, r1, #4
 800427c:	6021      	strge	r1, [r4, #0]
 800427e:	b90e      	cbnz	r6, 8004284 <_printf_i+0x114>
 8004280:	2d00      	cmp	r5, #0
 8004282:	d04b      	beq.n	800431c <_printf_i+0x1ac>
 8004284:	4615      	mov	r5, r2
 8004286:	fbb6 f1f3 	udiv	r1, r6, r3
 800428a:	fb03 6711 	mls	r7, r3, r1, r6
 800428e:	5dc7      	ldrb	r7, [r0, r7]
 8004290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004294:	4637      	mov	r7, r6
 8004296:	42bb      	cmp	r3, r7
 8004298:	460e      	mov	r6, r1
 800429a:	d9f4      	bls.n	8004286 <_printf_i+0x116>
 800429c:	2b08      	cmp	r3, #8
 800429e:	d10b      	bne.n	80042b8 <_printf_i+0x148>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	07de      	lsls	r6, r3, #31
 80042a4:	d508      	bpl.n	80042b8 <_printf_i+0x148>
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	6861      	ldr	r1, [r4, #4]
 80042aa:	4299      	cmp	r1, r3
 80042ac:	bfde      	ittt	le
 80042ae:	2330      	movle	r3, #48	; 0x30
 80042b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042b8:	1b52      	subs	r2, r2, r5
 80042ba:	6122      	str	r2, [r4, #16]
 80042bc:	f8cd a000 	str.w	sl, [sp]
 80042c0:	464b      	mov	r3, r9
 80042c2:	aa03      	add	r2, sp, #12
 80042c4:	4621      	mov	r1, r4
 80042c6:	4640      	mov	r0, r8
 80042c8:	f7ff fee4 	bl	8004094 <_printf_common>
 80042cc:	3001      	adds	r0, #1
 80042ce:	d14a      	bne.n	8004366 <_printf_i+0x1f6>
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	b004      	add	sp, #16
 80042d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	f043 0320 	orr.w	r3, r3, #32
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	4833      	ldr	r0, [pc, #204]	; (80043b0 <_printf_i+0x240>)
 80042e4:	2778      	movs	r7, #120	; 0x78
 80042e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	6829      	ldr	r1, [r5, #0]
 80042ee:	061f      	lsls	r7, r3, #24
 80042f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80042f4:	d402      	bmi.n	80042fc <_printf_i+0x18c>
 80042f6:	065f      	lsls	r7, r3, #25
 80042f8:	bf48      	it	mi
 80042fa:	b2b6      	uxthmi	r6, r6
 80042fc:	07df      	lsls	r7, r3, #31
 80042fe:	bf48      	it	mi
 8004300:	f043 0320 	orrmi.w	r3, r3, #32
 8004304:	6029      	str	r1, [r5, #0]
 8004306:	bf48      	it	mi
 8004308:	6023      	strmi	r3, [r4, #0]
 800430a:	b91e      	cbnz	r6, 8004314 <_printf_i+0x1a4>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	f023 0320 	bic.w	r3, r3, #32
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	2310      	movs	r3, #16
 8004316:	e7a7      	b.n	8004268 <_printf_i+0xf8>
 8004318:	4824      	ldr	r0, [pc, #144]	; (80043ac <_printf_i+0x23c>)
 800431a:	e7e4      	b.n	80042e6 <_printf_i+0x176>
 800431c:	4615      	mov	r5, r2
 800431e:	e7bd      	b.n	800429c <_printf_i+0x12c>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	6826      	ldr	r6, [r4, #0]
 8004324:	6961      	ldr	r1, [r4, #20]
 8004326:	1d18      	adds	r0, r3, #4
 8004328:	6028      	str	r0, [r5, #0]
 800432a:	0635      	lsls	r5, r6, #24
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	d501      	bpl.n	8004334 <_printf_i+0x1c4>
 8004330:	6019      	str	r1, [r3, #0]
 8004332:	e002      	b.n	800433a <_printf_i+0x1ca>
 8004334:	0670      	lsls	r0, r6, #25
 8004336:	d5fb      	bpl.n	8004330 <_printf_i+0x1c0>
 8004338:	8019      	strh	r1, [r3, #0]
 800433a:	2300      	movs	r3, #0
 800433c:	6123      	str	r3, [r4, #16]
 800433e:	4615      	mov	r5, r2
 8004340:	e7bc      	b.n	80042bc <_printf_i+0x14c>
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	1d1a      	adds	r2, r3, #4
 8004346:	602a      	str	r2, [r5, #0]
 8004348:	681d      	ldr	r5, [r3, #0]
 800434a:	6862      	ldr	r2, [r4, #4]
 800434c:	2100      	movs	r1, #0
 800434e:	4628      	mov	r0, r5
 8004350:	f7fb ff4e 	bl	80001f0 <memchr>
 8004354:	b108      	cbz	r0, 800435a <_printf_i+0x1ea>
 8004356:	1b40      	subs	r0, r0, r5
 8004358:	6060      	str	r0, [r4, #4]
 800435a:	6863      	ldr	r3, [r4, #4]
 800435c:	6123      	str	r3, [r4, #16]
 800435e:	2300      	movs	r3, #0
 8004360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004364:	e7aa      	b.n	80042bc <_printf_i+0x14c>
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	462a      	mov	r2, r5
 800436a:	4649      	mov	r1, r9
 800436c:	4640      	mov	r0, r8
 800436e:	47d0      	blx	sl
 8004370:	3001      	adds	r0, #1
 8004372:	d0ad      	beq.n	80042d0 <_printf_i+0x160>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	079b      	lsls	r3, r3, #30
 8004378:	d413      	bmi.n	80043a2 <_printf_i+0x232>
 800437a:	68e0      	ldr	r0, [r4, #12]
 800437c:	9b03      	ldr	r3, [sp, #12]
 800437e:	4298      	cmp	r0, r3
 8004380:	bfb8      	it	lt
 8004382:	4618      	movlt	r0, r3
 8004384:	e7a6      	b.n	80042d4 <_printf_i+0x164>
 8004386:	2301      	movs	r3, #1
 8004388:	4632      	mov	r2, r6
 800438a:	4649      	mov	r1, r9
 800438c:	4640      	mov	r0, r8
 800438e:	47d0      	blx	sl
 8004390:	3001      	adds	r0, #1
 8004392:	d09d      	beq.n	80042d0 <_printf_i+0x160>
 8004394:	3501      	adds	r5, #1
 8004396:	68e3      	ldr	r3, [r4, #12]
 8004398:	9903      	ldr	r1, [sp, #12]
 800439a:	1a5b      	subs	r3, r3, r1
 800439c:	42ab      	cmp	r3, r5
 800439e:	dcf2      	bgt.n	8004386 <_printf_i+0x216>
 80043a0:	e7eb      	b.n	800437a <_printf_i+0x20a>
 80043a2:	2500      	movs	r5, #0
 80043a4:	f104 0619 	add.w	r6, r4, #25
 80043a8:	e7f5      	b.n	8004396 <_printf_i+0x226>
 80043aa:	bf00      	nop
 80043ac:	08005259 	.word	0x08005259
 80043b0:	0800526a 	.word	0x0800526a

080043b4 <memmove>:
 80043b4:	4288      	cmp	r0, r1
 80043b6:	b510      	push	{r4, lr}
 80043b8:	eb01 0402 	add.w	r4, r1, r2
 80043bc:	d902      	bls.n	80043c4 <memmove+0x10>
 80043be:	4284      	cmp	r4, r0
 80043c0:	4623      	mov	r3, r4
 80043c2:	d807      	bhi.n	80043d4 <memmove+0x20>
 80043c4:	1e43      	subs	r3, r0, #1
 80043c6:	42a1      	cmp	r1, r4
 80043c8:	d008      	beq.n	80043dc <memmove+0x28>
 80043ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043d2:	e7f8      	b.n	80043c6 <memmove+0x12>
 80043d4:	4402      	add	r2, r0
 80043d6:	4601      	mov	r1, r0
 80043d8:	428a      	cmp	r2, r1
 80043da:	d100      	bne.n	80043de <memmove+0x2a>
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043e6:	e7f7      	b.n	80043d8 <memmove+0x24>

080043e8 <_sbrk_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4d06      	ldr	r5, [pc, #24]	; (8004404 <_sbrk_r+0x1c>)
 80043ec:	2300      	movs	r3, #0
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	602b      	str	r3, [r5, #0]
 80043f4:	f7fd f996 	bl	8001724 <_sbrk>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d102      	bne.n	8004402 <_sbrk_r+0x1a>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	b103      	cbz	r3, 8004402 <_sbrk_r+0x1a>
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	20000664 	.word	0x20000664

08004408 <memcpy>:
 8004408:	440a      	add	r2, r1
 800440a:	4291      	cmp	r1, r2
 800440c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004410:	d100      	bne.n	8004414 <memcpy+0xc>
 8004412:	4770      	bx	lr
 8004414:	b510      	push	{r4, lr}
 8004416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800441a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800441e:	4291      	cmp	r1, r2
 8004420:	d1f9      	bne.n	8004416 <memcpy+0xe>
 8004422:	bd10      	pop	{r4, pc}

08004424 <_realloc_r>:
 8004424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004428:	4680      	mov	r8, r0
 800442a:	4614      	mov	r4, r2
 800442c:	460e      	mov	r6, r1
 800442e:	b921      	cbnz	r1, 800443a <_realloc_r+0x16>
 8004430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004434:	4611      	mov	r1, r2
 8004436:	f7ff bc49 	b.w	8003ccc <_malloc_r>
 800443a:	b92a      	cbnz	r2, 8004448 <_realloc_r+0x24>
 800443c:	f7ff fbda 	bl	8003bf4 <_free_r>
 8004440:	4625      	mov	r5, r4
 8004442:	4628      	mov	r0, r5
 8004444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004448:	f000 f81b 	bl	8004482 <_malloc_usable_size_r>
 800444c:	4284      	cmp	r4, r0
 800444e:	4607      	mov	r7, r0
 8004450:	d802      	bhi.n	8004458 <_realloc_r+0x34>
 8004452:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004456:	d812      	bhi.n	800447e <_realloc_r+0x5a>
 8004458:	4621      	mov	r1, r4
 800445a:	4640      	mov	r0, r8
 800445c:	f7ff fc36 	bl	8003ccc <_malloc_r>
 8004460:	4605      	mov	r5, r0
 8004462:	2800      	cmp	r0, #0
 8004464:	d0ed      	beq.n	8004442 <_realloc_r+0x1e>
 8004466:	42bc      	cmp	r4, r7
 8004468:	4622      	mov	r2, r4
 800446a:	4631      	mov	r1, r6
 800446c:	bf28      	it	cs
 800446e:	463a      	movcs	r2, r7
 8004470:	f7ff ffca 	bl	8004408 <memcpy>
 8004474:	4631      	mov	r1, r6
 8004476:	4640      	mov	r0, r8
 8004478:	f7ff fbbc 	bl	8003bf4 <_free_r>
 800447c:	e7e1      	b.n	8004442 <_realloc_r+0x1e>
 800447e:	4635      	mov	r5, r6
 8004480:	e7df      	b.n	8004442 <_realloc_r+0x1e>

08004482 <_malloc_usable_size_r>:
 8004482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004486:	1f18      	subs	r0, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	bfbc      	itt	lt
 800448c:	580b      	ldrlt	r3, [r1, r0]
 800448e:	18c0      	addlt	r0, r0, r3
 8004490:	4770      	bx	lr
	...

08004494 <_init>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	bf00      	nop
 8004498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449a:	bc08      	pop	{r3}
 800449c:	469e      	mov	lr, r3
 800449e:	4770      	bx	lr

080044a0 <_fini>:
 80044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a2:	bf00      	nop
 80044a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a6:	bc08      	pop	{r3}
 80044a8:	469e      	mov	lr, r3
 80044aa:	4770      	bx	lr
